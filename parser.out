Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    LOADFILE

Grammar

Rule 0     S' -> program_start
Rule 1     program_start -> main_goto PROGRAM ID SEMICOL program_start_1 global_resources program_start_2 main
Rule 2     program_start_1 -> vars
Rule 3     program_start_2 -> funcs
Rule 4     program_start_2 -> empty
Rule 5     vars -> VAR type COL vars_1 SEMICOL vars
Rule 6     vars -> empty
Rule 7     vars_1 -> ID see_id vars_2 push_var vars_3
Rule 8     vars_2 -> dims_assign
Rule 9     vars_2 -> empty
Rule 10    vars_3 -> COMMA vars_1
Rule 11    vars_3 -> empty
Rule 12    dims_assign -> LBRACK see_dims_a CTEI see_dims_num dims_assign_1 RBRACK
Rule 13    dims_assign_1 -> COMMA see_dims_a CTEI see_dims_num
Rule 14    dims_assign_1 -> empty
Rule 15    type -> INT
Rule 16    type -> FLOAT
Rule 17    type -> CHAR
Rule 18    type -> BOOL
Rule 19    rtype -> INT
Rule 20    rtype -> FLOAT
Rule 21    rtype -> CHAR
Rule 22    rtype -> BOOL
Rule 23    rtype -> VOID
Rule 24    block -> LCURLY block_1 RCURLY
Rule 25    block_1 -> statement
Rule 26    funcs -> FUNC rtype ID see_id see_func_start params LCURLY funcs_1 set_func_init statement funcs_2 see_func_end RCURLY funcs_3
Rule 27    funcs_1 -> vars
Rule 28    funcs_2 -> RETURN expression SEMICOL
Rule 29    funcs_2 -> empty
Rule 30    funcs_3 -> funcs
Rule 31    funcs_3 -> empty
Rule 32    params -> LPAR params_1 RPAR
Rule 33    params_1 -> type ID see_id params_2 see_end_param reset_dims params_3
Rule 34    params_1 -> empty
Rule 35    params_2 -> dims
Rule 36    params_2 -> empty
Rule 37    params_3 -> COMMA params_1
Rule 38    params_3 -> empty
Rule 39    assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL
Rule 40    assign_1 -> dims
Rule 41    assign_1 -> empty
Rule 42    dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end
Rule 43    dims_1 -> COMMA see_dims_s expression generate_g_verify_s
Rule 44    dims_1 -> empty
Rule 45    statement -> statement_1 statement
Rule 46    statement -> empty
Rule 47    statement_1 -> assign
Rule 48    statement_1 -> cond
Rule 49    statement_1 -> cloop
Rule 50    statement_1 -> nloop
Rule 51    statement_1 -> read
Rule 52    statement_1 -> write
Rule 53    statement_1 -> callfunc SEMICOL
Rule 54    statement_1 -> histogram
Rule 55    statement_1 -> scale SEMICOL
Rule 56    histogram -> HIST LPAR ID COMMA expression RPAR SEMICOL
Rule 57    cond -> IF LPAR expression RPAR generate_g_if block cond_1 finish_if
Rule 58    cond_1 -> ELSE generate_g_else cond_2
Rule 59    cond_2 -> cond_3
Rule 60    cond_2 -> block
Rule 61    cond_3 -> cond
Rule 62    cond_3 -> empty
Rule 63    cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end
Rule 64    nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e
Rule 65    nloop_1 -> dims
Rule 66    nloop_1 -> empty
Rule 67    nloop_2 -> push_id EQUAL push_equal expression generate_assign
Rule 68    nloop_2 -> empty
Rule 69    callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
Rule 70    callfunc_1 -> expression verify_params callfunc_3
Rule 71    callfunc_1 -> empty
Rule 72    callfunc_3 -> COMMA increase_p_count callfunc_1
Rule 73    callfunc_3 -> empty
Rule 74    read -> READ LPAR read_1 RPAR SEMICOL
Rule 75    read_1 -> ID see_id read_2 push_id generate_g_read read_3
Rule 76    read_2 -> dims reset_dims
Rule 77    read_2 -> empty
Rule 78    read_3 -> COMMA read_1
Rule 79    read_3 -> empty
Rule 80    write -> WRITE LPAR write_1 RPAR SEMICOL
Rule 81    write_1 -> write_2 generate_g_write write_3
Rule 82    write_2 -> expression
Rule 83    write_2 -> CTES push_string
Rule 84    write_3 -> COMMA write_1
Rule 85    write_3 -> empty
Rule 86    expression -> sexp check_and_or expression_1
Rule 87    expression_1 -> expression_2 push_and_or expression
Rule 88    expression_1 -> empty
Rule 89    expression_2 -> OR
Rule 90    expression_2 -> AND
Rule 91    sexp -> exp check_relational sexp_1
Rule 92    sexp_1 -> sexp_2 push_relational sexp
Rule 93    sexp_1 -> empty
Rule 94    sexp_2 -> ISEQUAL
Rule 95    sexp_2 -> EQUAL
Rule 96    sexp_2 -> NOTEQUAL
Rule 97    sexp_2 -> GREATERTHAN
Rule 98    sexp_2 -> GREATERORQUAL
Rule 99    sexp_2 -> LESSTHAN
Rule 100   sexp_2 -> LESSOREQUAL
Rule 101   exp -> term check_sum exp_1
Rule 102   exp_1 -> exp_2 push_sum exp
Rule 103   exp_1 -> empty
Rule 104   exp_2 -> PLUS
Rule 105   exp_2 -> MINUS
Rule 106   term -> factor check_mul_div term_1
Rule 107   term_1 -> term_2 push_mul_div term
Rule 108   term_1 -> empty
Rule 109   term_2 -> TIMES
Rule 110   term_2 -> DIV
Rule 111   factor -> factor_1
Rule 112   factor -> factor_2
Rule 113   factor_1 -> ID see_id push_id factor_3 print_value reset_dims
Rule 114   factor_1 -> callfunc
Rule 115   factor_1 -> CTEI push_int
Rule 116   factor_1 -> CTEF push_float
Rule 117   factor_1 -> CTEB push_bool
Rule 118   factor_1 -> CTEC push_char
Rule 119   factor_1 -> MINUS factor_1
Rule 120   factor_1 -> mean
Rule 121   factor_1 -> median
Rule 122   factor_1 -> mode
Rule 123   factor_1 -> variance
Rule 124   factor_1 -> standard_deviation
Rule 125   factor_1 -> average
Rule 126   factor_2 -> LPAR add_ff expression RPAR pop_ff
Rule 127   factor_3 -> dims
Rule 128   factor_3 -> empty
Rule 129   main -> MAIN see_id LPAR RPAR LCURLY see_func_start main_1 set_func_init fill_main_goto statement END SEMICOL RCURLY generate_end
Rule 130   main_1 -> vars
Rule 131   mean -> MEAN LPAR ID RPAR
Rule 132   median -> MEDIAN LPAR ID RPAR
Rule 133   mode -> MODE LPAR ID RPAR
Rule 134   variance -> VARIANCE LPAR ID RPAR
Rule 135   standard_deviation -> SD LPAR ID RPAR
Rule 136   scale -> SCALE LPAR ID COMMA ID RPAR
Rule 137   average -> AVG LPAR ID RPAR
Rule 138   see_id -> empty
Rule 139   see_dims -> empty
Rule 140   see_dims_s -> empty
Rule 141   generate_g_verify_f -> empty
Rule 142   generate_g_verify_s -> empty
Rule 143   dims_end -> empty
Rule 144   see_dims_a -> empty
Rule 145   see_dims_num -> empty
Rule 146   push_var -> empty
Rule 147   see_func_start -> empty
Rule 148   global_resources -> empty
Rule 149   see_func_end -> empty
Rule 150   set_func_init -> empty
Rule 151   see_end_param -> empty
Rule 152   reset_dims -> empty
Rule 153   print_value -> empty
Rule 154   check_and_or -> empty
Rule 155   push_and_or -> empty
Rule 156   check_relational -> empty
Rule 157   push_relational -> empty
Rule 158   check_sum -> empty
Rule 159   push_sum -> empty
Rule 160   check_mul_div -> empty
Rule 161   push_mul_div -> empty
Rule 162   add_ff -> empty
Rule 163   pop_ff -> empty
Rule 164   push_int -> empty
Rule 165   push_float -> empty
Rule 166   push_bool -> empty
Rule 167   push_char -> empty
Rule 168   push_string -> empty
Rule 169   push_id -> empty
Rule 170   push_equal -> empty
Rule 171   generate_assign -> empty
Rule 172   generate_g_if -> empty
Rule 173   finish_if -> empty
Rule 174   generate_g_else -> empty
Rule 175   generate_g_read -> empty
Rule 176   generate_g_write -> empty
Rule 177   cloop_push_jump -> empty
Rule 178   generate_g_cloop_start -> empty
Rule 179   generate_g_cloop_end -> empty
Rule 180   generate_g_nloop_s -> empty
Rule 181   generate_g_nloop_e -> empty
Rule 182   generate_end -> empty
Rule 183   verify_func -> empty
Rule 184   activate_record -> empty
Rule 185   verify_params -> empty
Rule 186   increase_p_count -> empty
Rule 187   verify_p_num -> empty
Rule 188   main_goto -> empty
Rule 189   fill_main_goto -> empty
Rule 190   empty -> <empty>

Terminals, with rules where they appear

AND                  : 90
AVG                  : 137
BOOL                 : 18 22
CHAR                 : 17 21
COL                  : 5
COMMA                : 10 13 37 43 56 72 78 84 136
COMMENT              : 
CTEB                 : 117
CTEC                 : 118
CTEF                 : 116
CTEI                 : 12 13 115
CTES                 : 83
DIV                  : 110
ELSE                 : 58
END                  : 129
EQUAL                : 39 67 95
FLOAT                : 16 20
FROM                 : 64
FUNC                 : 26
GREATERORQUAL        : 98
GREATERTHAN          : 97
HIST                 : 56
ID                   : 1 7 26 33 39 56 64 69 75 113 131 132 133 134 135 136 136 137
IF                   : 57
INT                  : 15 19
ISEQUAL              : 94
LBRACK               : 12 42
LCURLY               : 24 26 129
LESSOREQUAL          : 100
LESSTHAN             : 99
LOADFILE             : 
LPAR                 : 32 56 57 63 69 74 80 126 129 131 132 133 134 135 136 137
MAIN                 : 129
MEAN                 : 131
MEDIAN               : 132
MINUS                : 105 119
MODE                 : 133
NOTEQUAL             : 96
OR                   : 89
PLUS                 : 104
PROGRAM              : 1
RBRACK               : 12 42
RCURLY               : 24 26 129
READ                 : 74
RETURN               : 28
RPAR                 : 32 56 57 63 69 74 80 126 129 131 132 133 134 135 136 137
SCALE                : 136
SD                   : 135
SEMICOL              : 1 5 28 39 53 55 56 74 80 129
TIMES                : 109
TO                   : 64
VAR                  : 5
VARIANCE             : 134
VOID                 : 23
WHILE                : 63
WRITE                : 80
error                : 

Nonterminals, with rules where they appear

activate_record      : 69
add_ff               : 126
assign               : 47
assign_1             : 39
average              : 125
block                : 57 60 63 64
block_1              : 24
callfunc             : 53 114
callfunc_1           : 69 72
callfunc_3           : 70
check_and_or         : 86
check_mul_div        : 106
check_relational     : 91
check_sum            : 101
cloop                : 49
cloop_push_jump      : 63
cond                 : 48 61
cond_1               : 57
cond_2               : 58
cond_3               : 59
dims                 : 35 40 65 76 127
dims_1               : 42
dims_assign          : 8
dims_assign_1        : 12
dims_end             : 42
empty                : 4 6 9 11 14 29 31 34 36 38 41 44 46 62 66 68 71 73 77 79 85 88 93 103 108 128 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189
exp                  : 91 102
exp_1                : 101
exp_2                : 102
expression           : 28 39 42 43 56 57 63 64 67 70 82 87 126
expression_1         : 86
expression_2         : 87
factor               : 106
factor_1             : 111 119
factor_2             : 112
factor_3             : 113
fill_main_goto       : 129
finish_if            : 57
funcs                : 3 30
funcs_1              : 26
funcs_2              : 26
funcs_3              : 26
generate_assign      : 39 67
generate_end         : 129
generate_g_cloop_end : 63
generate_g_cloop_start : 63
generate_g_else      : 58
generate_g_if        : 57
generate_g_nloop_e   : 64
generate_g_nloop_s   : 64
generate_g_read      : 75
generate_g_verify_f  : 42
generate_g_verify_s  : 43
generate_g_write     : 81
global_resources     : 1
histogram            : 54
increase_p_count     : 72
main                 : 1
main_1               : 129
main_goto            : 1
mean                 : 120
median               : 121
mode                 : 122
nloop                : 50
nloop_1              : 64
nloop_2              : 64
params               : 26
params_1             : 32 37
params_2             : 33
params_3             : 33
pop_ff               : 126
print_value          : 113
program_start        : 0
program_start_1      : 1
program_start_2      : 1
push_and_or          : 87
push_bool            : 117
push_char            : 118
push_equal           : 39 67
push_float           : 116
push_id              : 39 64 67 75 113
push_int             : 115
push_mul_div         : 107
push_relational      : 92
push_string          : 83
push_sum             : 102
push_var             : 7
read                 : 51
read_1               : 74 78
read_2               : 75
read_3               : 75
reset_dims           : 33 76 113
rtype                : 26
scale                : 55
see_dims             : 42
see_dims_a           : 12 13
see_dims_num         : 12 13
see_dims_s           : 43
see_end_param        : 33
see_func_end         : 26
see_func_start       : 26 129
see_id               : 7 26 33 39 64 69 75 113 129
set_func_init        : 26 129
sexp                 : 86 92
sexp_1               : 91
sexp_2               : 92
standard_deviation   : 124
statement            : 25 26 45 129
statement_1          : 45
term                 : 101 107
term_1               : 106
term_2               : 107
type                 : 5 33
variance             : 123
vars                 : 2 5 27 130
vars_1               : 5 10
vars_2               : 7
vars_3               : 7
verify_func          : 69
verify_p_num         : 69
verify_params        : 70
write                : 52
write_1              : 80 84
write_2              : 81
write_3              : 81

Parsing method: LALR

state 0

    (0) S' -> . program_start
    (1) program_start -> . main_goto PROGRAM ID SEMICOL program_start_1 global_resources program_start_2 main
    (188) main_goto -> . empty
    (190) empty -> .

    PROGRAM         reduce using rule 190 (empty -> .)

    program_start                  shift and go to state 1
    main_goto                      shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program_start .



state 2

    (1) program_start -> main_goto . PROGRAM ID SEMICOL program_start_1 global_resources program_start_2 main

    PROGRAM         shift and go to state 4


state 3

    (188) main_goto -> empty .

    PROGRAM         reduce using rule 188 (main_goto -> empty .)


state 4

    (1) program_start -> main_goto PROGRAM . ID SEMICOL program_start_1 global_resources program_start_2 main

    ID              shift and go to state 5


state 5

    (1) program_start -> main_goto PROGRAM ID . SEMICOL program_start_1 global_resources program_start_2 main

    SEMICOL         shift and go to state 6


state 6

    (1) program_start -> main_goto PROGRAM ID SEMICOL . program_start_1 global_resources program_start_2 main
    (2) program_start_1 -> . vars
    (5) vars -> . VAR type COL vars_1 SEMICOL vars
    (6) vars -> . empty
    (190) empty -> .

    VAR             shift and go to state 9
    FUNC            reduce using rule 190 (empty -> .)
    MAIN            reduce using rule 190 (empty -> .)

    program_start_1                shift and go to state 7
    vars                           shift and go to state 8
    empty                          shift and go to state 10

state 7

    (1) program_start -> main_goto PROGRAM ID SEMICOL program_start_1 . global_resources program_start_2 main
    (148) global_resources -> . empty
    (190) empty -> .

    FUNC            reduce using rule 190 (empty -> .)
    MAIN            reduce using rule 190 (empty -> .)

    global_resources               shift and go to state 11
    empty                          shift and go to state 12

state 8

    (2) program_start_1 -> vars .

    FUNC            reduce using rule 2 (program_start_1 -> vars .)
    MAIN            reduce using rule 2 (program_start_1 -> vars .)


state 9

    (5) vars -> VAR . type COL vars_1 SEMICOL vars
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . CHAR
    (18) type -> . BOOL

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17

    type                           shift and go to state 13

state 10

    (6) vars -> empty .

    FUNC            reduce using rule 6 (vars -> empty .)
    MAIN            reduce using rule 6 (vars -> empty .)
    ID              reduce using rule 6 (vars -> empty .)
    IF              reduce using rule 6 (vars -> empty .)
    WHILE           reduce using rule 6 (vars -> empty .)
    FROM            reduce using rule 6 (vars -> empty .)
    READ            reduce using rule 6 (vars -> empty .)
    WRITE           reduce using rule 6 (vars -> empty .)
    HIST            reduce using rule 6 (vars -> empty .)
    SCALE           reduce using rule 6 (vars -> empty .)
    END             reduce using rule 6 (vars -> empty .)
    RETURN          reduce using rule 6 (vars -> empty .)
    RCURLY          reduce using rule 6 (vars -> empty .)


state 11

    (1) program_start -> main_goto PROGRAM ID SEMICOL program_start_1 global_resources . program_start_2 main
    (3) program_start_2 -> . funcs
    (4) program_start_2 -> . empty
    (26) funcs -> . FUNC rtype ID see_id see_func_start params LCURLY funcs_1 set_func_init statement funcs_2 see_func_end RCURLY funcs_3
    (190) empty -> .

    FUNC            shift and go to state 21
    MAIN            reduce using rule 190 (empty -> .)

    program_start_2                shift and go to state 18
    funcs                          shift and go to state 19
    empty                          shift and go to state 20

state 12

    (148) global_resources -> empty .

    FUNC            reduce using rule 148 (global_resources -> empty .)
    MAIN            reduce using rule 148 (global_resources -> empty .)


state 13

    (5) vars -> VAR type . COL vars_1 SEMICOL vars

    COL             shift and go to state 22


state 14

    (15) type -> INT .

    COL             reduce using rule 15 (type -> INT .)
    ID              reduce using rule 15 (type -> INT .)


state 15

    (16) type -> FLOAT .

    COL             reduce using rule 16 (type -> FLOAT .)
    ID              reduce using rule 16 (type -> FLOAT .)


state 16

    (17) type -> CHAR .

    COL             reduce using rule 17 (type -> CHAR .)
    ID              reduce using rule 17 (type -> CHAR .)


state 17

    (18) type -> BOOL .

    COL             reduce using rule 18 (type -> BOOL .)
    ID              reduce using rule 18 (type -> BOOL .)


state 18

    (1) program_start -> main_goto PROGRAM ID SEMICOL program_start_1 global_resources program_start_2 . main
    (129) main -> . MAIN see_id LPAR RPAR LCURLY see_func_start main_1 set_func_init fill_main_goto statement END SEMICOL RCURLY generate_end

    MAIN            shift and go to state 24

    main                           shift and go to state 23

state 19

    (3) program_start_2 -> funcs .

    MAIN            reduce using rule 3 (program_start_2 -> funcs .)


state 20

    (4) program_start_2 -> empty .

    MAIN            reduce using rule 4 (program_start_2 -> empty .)


state 21

    (26) funcs -> FUNC . rtype ID see_id see_func_start params LCURLY funcs_1 set_func_init statement funcs_2 see_func_end RCURLY funcs_3
    (19) rtype -> . INT
    (20) rtype -> . FLOAT
    (21) rtype -> . CHAR
    (22) rtype -> . BOOL
    (23) rtype -> . VOID

    INT             shift and go to state 26
    FLOAT           shift and go to state 27
    CHAR            shift and go to state 28
    BOOL            shift and go to state 29
    VOID            shift and go to state 30

    rtype                          shift and go to state 25

state 22

    (5) vars -> VAR type COL . vars_1 SEMICOL vars
    (7) vars_1 -> . ID see_id vars_2 push_var vars_3

    ID              shift and go to state 32

    vars_1                         shift and go to state 31

state 23

    (1) program_start -> main_goto PROGRAM ID SEMICOL program_start_1 global_resources program_start_2 main .

    $end            reduce using rule 1 (program_start -> main_goto PROGRAM ID SEMICOL program_start_1 global_resources program_start_2 main .)


state 24

    (129) main -> MAIN . see_id LPAR RPAR LCURLY see_func_start main_1 set_func_init fill_main_goto statement END SEMICOL RCURLY generate_end
    (138) see_id -> . empty
    (190) empty -> .

    LPAR            reduce using rule 190 (empty -> .)

    see_id                         shift and go to state 33
    empty                          shift and go to state 34

state 25

    (26) funcs -> FUNC rtype . ID see_id see_func_start params LCURLY funcs_1 set_func_init statement funcs_2 see_func_end RCURLY funcs_3

    ID              shift and go to state 35


state 26

    (19) rtype -> INT .

    ID              reduce using rule 19 (rtype -> INT .)


state 27

    (20) rtype -> FLOAT .

    ID              reduce using rule 20 (rtype -> FLOAT .)


state 28

    (21) rtype -> CHAR .

    ID              reduce using rule 21 (rtype -> CHAR .)


state 29

    (22) rtype -> BOOL .

    ID              reduce using rule 22 (rtype -> BOOL .)


state 30

    (23) rtype -> VOID .

    ID              reduce using rule 23 (rtype -> VOID .)


state 31

    (5) vars -> VAR type COL vars_1 . SEMICOL vars

    SEMICOL         shift and go to state 36


state 32

    (7) vars_1 -> ID . see_id vars_2 push_var vars_3
    (138) see_id -> . empty
    (190) empty -> .

    LBRACK          reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)

    see_id                         shift and go to state 37
    empty                          shift and go to state 34

state 33

    (129) main -> MAIN see_id . LPAR RPAR LCURLY see_func_start main_1 set_func_init fill_main_goto statement END SEMICOL RCURLY generate_end

    LPAR            shift and go to state 38


state 34

    (138) see_id -> empty .

    LPAR            reduce using rule 138 (see_id -> empty .)
    LBRACK          reduce using rule 138 (see_id -> empty .)
    COMMA           reduce using rule 138 (see_id -> empty .)
    SEMICOL         reduce using rule 138 (see_id -> empty .)
    RPAR            reduce using rule 138 (see_id -> empty .)
    EQUAL           reduce using rule 138 (see_id -> empty .)
    TO              reduce using rule 138 (see_id -> empty .)
    TIMES           reduce using rule 138 (see_id -> empty .)
    DIV             reduce using rule 138 (see_id -> empty .)
    PLUS            reduce using rule 138 (see_id -> empty .)
    MINUS           reduce using rule 138 (see_id -> empty .)
    ISEQUAL         reduce using rule 138 (see_id -> empty .)
    NOTEQUAL        reduce using rule 138 (see_id -> empty .)
    GREATERTHAN     reduce using rule 138 (see_id -> empty .)
    GREATERORQUAL   reduce using rule 138 (see_id -> empty .)
    LESSTHAN        reduce using rule 138 (see_id -> empty .)
    LESSOREQUAL     reduce using rule 138 (see_id -> empty .)
    OR              reduce using rule 138 (see_id -> empty .)
    AND             reduce using rule 138 (see_id -> empty .)
    RBRACK          reduce using rule 138 (see_id -> empty .)
    LCURLY          reduce using rule 138 (see_id -> empty .)


state 35

    (26) funcs -> FUNC rtype ID . see_id see_func_start params LCURLY funcs_1 set_func_init statement funcs_2 see_func_end RCURLY funcs_3
    (138) see_id -> . empty
    (190) empty -> .

    LPAR            reduce using rule 190 (empty -> .)

    see_id                         shift and go to state 39
    empty                          shift and go to state 34

state 36

    (5) vars -> VAR type COL vars_1 SEMICOL . vars
    (5) vars -> . VAR type COL vars_1 SEMICOL vars
    (6) vars -> . empty
    (190) empty -> .

    VAR             shift and go to state 9
    FUNC            reduce using rule 190 (empty -> .)
    MAIN            reduce using rule 190 (empty -> .)
    ID              reduce using rule 190 (empty -> .)
    IF              reduce using rule 190 (empty -> .)
    WHILE           reduce using rule 190 (empty -> .)
    FROM            reduce using rule 190 (empty -> .)
    READ            reduce using rule 190 (empty -> .)
    WRITE           reduce using rule 190 (empty -> .)
    HIST            reduce using rule 190 (empty -> .)
    SCALE           reduce using rule 190 (empty -> .)
    END             reduce using rule 190 (empty -> .)
    RETURN          reduce using rule 190 (empty -> .)
    RCURLY          reduce using rule 190 (empty -> .)

    vars                           shift and go to state 40
    empty                          shift and go to state 10

state 37

    (7) vars_1 -> ID see_id . vars_2 push_var vars_3
    (8) vars_2 -> . dims_assign
    (9) vars_2 -> . empty
    (12) dims_assign -> . LBRACK see_dims_a CTEI see_dims_num dims_assign_1 RBRACK
    (190) empty -> .

    LBRACK          shift and go to state 44
    COMMA           reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)

    vars_2                         shift and go to state 41
    dims_assign                    shift and go to state 42
    empty                          shift and go to state 43

state 38

    (129) main -> MAIN see_id LPAR . RPAR LCURLY see_func_start main_1 set_func_init fill_main_goto statement END SEMICOL RCURLY generate_end

    RPAR            shift and go to state 45


state 39

    (26) funcs -> FUNC rtype ID see_id . see_func_start params LCURLY funcs_1 set_func_init statement funcs_2 see_func_end RCURLY funcs_3
    (147) see_func_start -> . empty
    (190) empty -> .

    LPAR            reduce using rule 190 (empty -> .)

    see_func_start                 shift and go to state 46
    empty                          shift and go to state 47

state 40

    (5) vars -> VAR type COL vars_1 SEMICOL vars .

    FUNC            reduce using rule 5 (vars -> VAR type COL vars_1 SEMICOL vars .)
    MAIN            reduce using rule 5 (vars -> VAR type COL vars_1 SEMICOL vars .)
    ID              reduce using rule 5 (vars -> VAR type COL vars_1 SEMICOL vars .)
    IF              reduce using rule 5 (vars -> VAR type COL vars_1 SEMICOL vars .)
    WHILE           reduce using rule 5 (vars -> VAR type COL vars_1 SEMICOL vars .)
    FROM            reduce using rule 5 (vars -> VAR type COL vars_1 SEMICOL vars .)
    READ            reduce using rule 5 (vars -> VAR type COL vars_1 SEMICOL vars .)
    WRITE           reduce using rule 5 (vars -> VAR type COL vars_1 SEMICOL vars .)
    HIST            reduce using rule 5 (vars -> VAR type COL vars_1 SEMICOL vars .)
    SCALE           reduce using rule 5 (vars -> VAR type COL vars_1 SEMICOL vars .)
    END             reduce using rule 5 (vars -> VAR type COL vars_1 SEMICOL vars .)
    RETURN          reduce using rule 5 (vars -> VAR type COL vars_1 SEMICOL vars .)
    RCURLY          reduce using rule 5 (vars -> VAR type COL vars_1 SEMICOL vars .)


state 41

    (7) vars_1 -> ID see_id vars_2 . push_var vars_3
    (146) push_var -> . empty
    (190) empty -> .

    COMMA           reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)

    push_var                       shift and go to state 48
    empty                          shift and go to state 49

state 42

    (8) vars_2 -> dims_assign .

    COMMA           reduce using rule 8 (vars_2 -> dims_assign .)
    SEMICOL         reduce using rule 8 (vars_2 -> dims_assign .)


state 43

    (9) vars_2 -> empty .

    COMMA           reduce using rule 9 (vars_2 -> empty .)
    SEMICOL         reduce using rule 9 (vars_2 -> empty .)


state 44

    (12) dims_assign -> LBRACK . see_dims_a CTEI see_dims_num dims_assign_1 RBRACK
    (144) see_dims_a -> . empty
    (190) empty -> .

    CTEI            reduce using rule 190 (empty -> .)

    see_dims_a                     shift and go to state 50
    empty                          shift and go to state 51

state 45

    (129) main -> MAIN see_id LPAR RPAR . LCURLY see_func_start main_1 set_func_init fill_main_goto statement END SEMICOL RCURLY generate_end

    LCURLY          shift and go to state 52


state 46

    (26) funcs -> FUNC rtype ID see_id see_func_start . params LCURLY funcs_1 set_func_init statement funcs_2 see_func_end RCURLY funcs_3
    (32) params -> . LPAR params_1 RPAR

    LPAR            shift and go to state 54

    params                         shift and go to state 53

state 47

    (147) see_func_start -> empty .

    LPAR            reduce using rule 147 (see_func_start -> empty .)
    VAR             reduce using rule 147 (see_func_start -> empty .)
    ID              reduce using rule 147 (see_func_start -> empty .)
    IF              reduce using rule 147 (see_func_start -> empty .)
    WHILE           reduce using rule 147 (see_func_start -> empty .)
    FROM            reduce using rule 147 (see_func_start -> empty .)
    READ            reduce using rule 147 (see_func_start -> empty .)
    WRITE           reduce using rule 147 (see_func_start -> empty .)
    HIST            reduce using rule 147 (see_func_start -> empty .)
    SCALE           reduce using rule 147 (see_func_start -> empty .)
    END             reduce using rule 147 (see_func_start -> empty .)


state 48

    (7) vars_1 -> ID see_id vars_2 push_var . vars_3
    (10) vars_3 -> . COMMA vars_1
    (11) vars_3 -> . empty
    (190) empty -> .

    COMMA           shift and go to state 56
    SEMICOL         reduce using rule 190 (empty -> .)

    vars_3                         shift and go to state 55
    empty                          shift and go to state 57

state 49

    (146) push_var -> empty .

    COMMA           reduce using rule 146 (push_var -> empty .)
    SEMICOL         reduce using rule 146 (push_var -> empty .)


state 50

    (12) dims_assign -> LBRACK see_dims_a . CTEI see_dims_num dims_assign_1 RBRACK

    CTEI            shift and go to state 58


state 51

    (144) see_dims_a -> empty .

    CTEI            reduce using rule 144 (see_dims_a -> empty .)


state 52

    (129) main -> MAIN see_id LPAR RPAR LCURLY . see_func_start main_1 set_func_init fill_main_goto statement END SEMICOL RCURLY generate_end
    (147) see_func_start -> . empty
    (190) empty -> .

    VAR             reduce using rule 190 (empty -> .)
    ID              reduce using rule 190 (empty -> .)
    IF              reduce using rule 190 (empty -> .)
    WHILE           reduce using rule 190 (empty -> .)
    FROM            reduce using rule 190 (empty -> .)
    READ            reduce using rule 190 (empty -> .)
    WRITE           reduce using rule 190 (empty -> .)
    HIST            reduce using rule 190 (empty -> .)
    SCALE           reduce using rule 190 (empty -> .)
    END             reduce using rule 190 (empty -> .)

    see_func_start                 shift and go to state 59
    empty                          shift and go to state 47

state 53

    (26) funcs -> FUNC rtype ID see_id see_func_start params . LCURLY funcs_1 set_func_init statement funcs_2 see_func_end RCURLY funcs_3

    LCURLY          shift and go to state 60


state 54

    (32) params -> LPAR . params_1 RPAR
    (33) params_1 -> . type ID see_id params_2 see_end_param reset_dims params_3
    (34) params_1 -> . empty
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . CHAR
    (18) type -> . BOOL
    (190) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17
    RPAR            reduce using rule 190 (empty -> .)

    params_1                       shift and go to state 61
    type                           shift and go to state 62
    empty                          shift and go to state 63

state 55

    (7) vars_1 -> ID see_id vars_2 push_var vars_3 .

    SEMICOL         reduce using rule 7 (vars_1 -> ID see_id vars_2 push_var vars_3 .)


state 56

    (10) vars_3 -> COMMA . vars_1
    (7) vars_1 -> . ID see_id vars_2 push_var vars_3

    ID              shift and go to state 32

    vars_1                         shift and go to state 64

state 57

    (11) vars_3 -> empty .

    SEMICOL         reduce using rule 11 (vars_3 -> empty .)


state 58

    (12) dims_assign -> LBRACK see_dims_a CTEI . see_dims_num dims_assign_1 RBRACK
    (145) see_dims_num -> . empty
    (190) empty -> .

    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)

    see_dims_num                   shift and go to state 65
    empty                          shift and go to state 66

state 59

    (129) main -> MAIN see_id LPAR RPAR LCURLY see_func_start . main_1 set_func_init fill_main_goto statement END SEMICOL RCURLY generate_end
    (130) main_1 -> . vars
    (5) vars -> . VAR type COL vars_1 SEMICOL vars
    (6) vars -> . empty
    (190) empty -> .

    VAR             shift and go to state 9
    ID              reduce using rule 190 (empty -> .)
    IF              reduce using rule 190 (empty -> .)
    WHILE           reduce using rule 190 (empty -> .)
    FROM            reduce using rule 190 (empty -> .)
    READ            reduce using rule 190 (empty -> .)
    WRITE           reduce using rule 190 (empty -> .)
    HIST            reduce using rule 190 (empty -> .)
    SCALE           reduce using rule 190 (empty -> .)
    END             reduce using rule 190 (empty -> .)

    main_1                         shift and go to state 67
    vars                           shift and go to state 68
    empty                          shift and go to state 10

state 60

    (26) funcs -> FUNC rtype ID see_id see_func_start params LCURLY . funcs_1 set_func_init statement funcs_2 see_func_end RCURLY funcs_3
    (27) funcs_1 -> . vars
    (5) vars -> . VAR type COL vars_1 SEMICOL vars
    (6) vars -> . empty
    (190) empty -> .

    VAR             shift and go to state 9
    ID              reduce using rule 190 (empty -> .)
    IF              reduce using rule 190 (empty -> .)
    WHILE           reduce using rule 190 (empty -> .)
    FROM            reduce using rule 190 (empty -> .)
    READ            reduce using rule 190 (empty -> .)
    WRITE           reduce using rule 190 (empty -> .)
    HIST            reduce using rule 190 (empty -> .)
    SCALE           reduce using rule 190 (empty -> .)
    RETURN          reduce using rule 190 (empty -> .)
    RCURLY          reduce using rule 190 (empty -> .)

    funcs_1                        shift and go to state 69
    vars                           shift and go to state 70
    empty                          shift and go to state 10

state 61

    (32) params -> LPAR params_1 . RPAR

    RPAR            shift and go to state 71


state 62

    (33) params_1 -> type . ID see_id params_2 see_end_param reset_dims params_3

    ID              shift and go to state 72


state 63

    (34) params_1 -> empty .

    RPAR            reduce using rule 34 (params_1 -> empty .)


state 64

    (10) vars_3 -> COMMA vars_1 .

    SEMICOL         reduce using rule 10 (vars_3 -> COMMA vars_1 .)


state 65

    (12) dims_assign -> LBRACK see_dims_a CTEI see_dims_num . dims_assign_1 RBRACK
    (13) dims_assign_1 -> . COMMA see_dims_a CTEI see_dims_num
    (14) dims_assign_1 -> . empty
    (190) empty -> .

    COMMA           shift and go to state 74
    RBRACK          reduce using rule 190 (empty -> .)

    dims_assign_1                  shift and go to state 73
    empty                          shift and go to state 75

state 66

    (145) see_dims_num -> empty .

    COMMA           reduce using rule 145 (see_dims_num -> empty .)
    RBRACK          reduce using rule 145 (see_dims_num -> empty .)


state 67

    (129) main -> MAIN see_id LPAR RPAR LCURLY see_func_start main_1 . set_func_init fill_main_goto statement END SEMICOL RCURLY generate_end
    (150) set_func_init -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    IF              reduce using rule 190 (empty -> .)
    WHILE           reduce using rule 190 (empty -> .)
    FROM            reduce using rule 190 (empty -> .)
    READ            reduce using rule 190 (empty -> .)
    WRITE           reduce using rule 190 (empty -> .)
    HIST            reduce using rule 190 (empty -> .)
    SCALE           reduce using rule 190 (empty -> .)
    END             reduce using rule 190 (empty -> .)

    set_func_init                  shift and go to state 76
    empty                          shift and go to state 77

state 68

    (130) main_1 -> vars .

    ID              reduce using rule 130 (main_1 -> vars .)
    IF              reduce using rule 130 (main_1 -> vars .)
    WHILE           reduce using rule 130 (main_1 -> vars .)
    FROM            reduce using rule 130 (main_1 -> vars .)
    READ            reduce using rule 130 (main_1 -> vars .)
    WRITE           reduce using rule 130 (main_1 -> vars .)
    HIST            reduce using rule 130 (main_1 -> vars .)
    SCALE           reduce using rule 130 (main_1 -> vars .)
    END             reduce using rule 130 (main_1 -> vars .)


state 69

    (26) funcs -> FUNC rtype ID see_id see_func_start params LCURLY funcs_1 . set_func_init statement funcs_2 see_func_end RCURLY funcs_3
    (150) set_func_init -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    IF              reduce using rule 190 (empty -> .)
    WHILE           reduce using rule 190 (empty -> .)
    FROM            reduce using rule 190 (empty -> .)
    READ            reduce using rule 190 (empty -> .)
    WRITE           reduce using rule 190 (empty -> .)
    HIST            reduce using rule 190 (empty -> .)
    SCALE           reduce using rule 190 (empty -> .)
    RETURN          reduce using rule 190 (empty -> .)
    RCURLY          reduce using rule 190 (empty -> .)

    set_func_init                  shift and go to state 78
    empty                          shift and go to state 77

state 70

    (27) funcs_1 -> vars .

    ID              reduce using rule 27 (funcs_1 -> vars .)
    IF              reduce using rule 27 (funcs_1 -> vars .)
    WHILE           reduce using rule 27 (funcs_1 -> vars .)
    FROM            reduce using rule 27 (funcs_1 -> vars .)
    READ            reduce using rule 27 (funcs_1 -> vars .)
    WRITE           reduce using rule 27 (funcs_1 -> vars .)
    HIST            reduce using rule 27 (funcs_1 -> vars .)
    SCALE           reduce using rule 27 (funcs_1 -> vars .)
    RETURN          reduce using rule 27 (funcs_1 -> vars .)
    RCURLY          reduce using rule 27 (funcs_1 -> vars .)


state 71

    (32) params -> LPAR params_1 RPAR .

    LCURLY          reduce using rule 32 (params -> LPAR params_1 RPAR .)


state 72

    (33) params_1 -> type ID . see_id params_2 see_end_param reset_dims params_3
    (138) see_id -> . empty
    (190) empty -> .

    LBRACK          reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    see_id                         shift and go to state 79
    empty                          shift and go to state 34

state 73

    (12) dims_assign -> LBRACK see_dims_a CTEI see_dims_num dims_assign_1 . RBRACK

    RBRACK          shift and go to state 80


state 74

    (13) dims_assign_1 -> COMMA . see_dims_a CTEI see_dims_num
    (144) see_dims_a -> . empty
    (190) empty -> .

    CTEI            reduce using rule 190 (empty -> .)

    see_dims_a                     shift and go to state 81
    empty                          shift and go to state 51

state 75

    (14) dims_assign_1 -> empty .

    RBRACK          reduce using rule 14 (dims_assign_1 -> empty .)


state 76

    (129) main -> MAIN see_id LPAR RPAR LCURLY see_func_start main_1 set_func_init . fill_main_goto statement END SEMICOL RCURLY generate_end
    (189) fill_main_goto -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    IF              reduce using rule 190 (empty -> .)
    WHILE           reduce using rule 190 (empty -> .)
    FROM            reduce using rule 190 (empty -> .)
    READ            reduce using rule 190 (empty -> .)
    WRITE           reduce using rule 190 (empty -> .)
    HIST            reduce using rule 190 (empty -> .)
    SCALE           reduce using rule 190 (empty -> .)
    END             reduce using rule 190 (empty -> .)

    fill_main_goto                 shift and go to state 82
    empty                          shift and go to state 83

state 77

    (150) set_func_init -> empty .

    ID              reduce using rule 150 (set_func_init -> empty .)
    IF              reduce using rule 150 (set_func_init -> empty .)
    WHILE           reduce using rule 150 (set_func_init -> empty .)
    FROM            reduce using rule 150 (set_func_init -> empty .)
    READ            reduce using rule 150 (set_func_init -> empty .)
    WRITE           reduce using rule 150 (set_func_init -> empty .)
    HIST            reduce using rule 150 (set_func_init -> empty .)
    SCALE           reduce using rule 150 (set_func_init -> empty .)
    END             reduce using rule 150 (set_func_init -> empty .)
    RETURN          reduce using rule 150 (set_func_init -> empty .)
    RCURLY          reduce using rule 150 (set_func_init -> empty .)


state 78

    (26) funcs -> FUNC rtype ID see_id see_func_start params LCURLY funcs_1 set_func_init . statement funcs_2 see_func_end RCURLY funcs_3
    (45) statement -> . statement_1 statement
    (46) statement -> . empty
    (47) statement_1 -> . assign
    (48) statement_1 -> . cond
    (49) statement_1 -> . cloop
    (50) statement_1 -> . nloop
    (51) statement_1 -> . read
    (52) statement_1 -> . write
    (53) statement_1 -> . callfunc SEMICOL
    (54) statement_1 -> . histogram
    (55) statement_1 -> . scale SEMICOL
    (190) empty -> .
    (39) assign -> . ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL
    (57) cond -> . IF LPAR expression RPAR generate_g_if block cond_1 finish_if
    (63) cloop -> . WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end
    (64) nloop -> . FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e
    (74) read -> . READ LPAR read_1 RPAR SEMICOL
    (80) write -> . WRITE LPAR write_1 RPAR SEMICOL
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (56) histogram -> . HIST LPAR ID COMMA expression RPAR SEMICOL
    (136) scale -> . SCALE LPAR ID COMMA ID RPAR

    RETURN          reduce using rule 190 (empty -> .)
    RCURLY          reduce using rule 190 (empty -> .)
    ID              shift and go to state 84
    IF              shift and go to state 97
    WHILE           shift and go to state 98
    FROM            shift and go to state 99
    READ            shift and go to state 100
    WRITE           shift and go to state 101
    HIST            shift and go to state 102
    SCALE           shift and go to state 103

    statement                      shift and go to state 85
    statement_1                    shift and go to state 86
    empty                          shift and go to state 87
    assign                         shift and go to state 88
    cond                           shift and go to state 89
    cloop                          shift and go to state 90
    nloop                          shift and go to state 91
    read                           shift and go to state 92
    write                          shift and go to state 93
    callfunc                       shift and go to state 94
    histogram                      shift and go to state 95
    scale                          shift and go to state 96

state 79

    (33) params_1 -> type ID see_id . params_2 see_end_param reset_dims params_3
    (35) params_2 -> . dims
    (36) params_2 -> . empty
    (42) dims -> . LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end
    (190) empty -> .

    LBRACK          shift and go to state 107
    COMMA           reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    params_2                       shift and go to state 104
    dims                           shift and go to state 105
    empty                          shift and go to state 106

state 80

    (12) dims_assign -> LBRACK see_dims_a CTEI see_dims_num dims_assign_1 RBRACK .

    COMMA           reduce using rule 12 (dims_assign -> LBRACK see_dims_a CTEI see_dims_num dims_assign_1 RBRACK .)
    SEMICOL         reduce using rule 12 (dims_assign -> LBRACK see_dims_a CTEI see_dims_num dims_assign_1 RBRACK .)


state 81

    (13) dims_assign_1 -> COMMA see_dims_a . CTEI see_dims_num

    CTEI            shift and go to state 108


state 82

    (129) main -> MAIN see_id LPAR RPAR LCURLY see_func_start main_1 set_func_init fill_main_goto . statement END SEMICOL RCURLY generate_end
    (45) statement -> . statement_1 statement
    (46) statement -> . empty
    (47) statement_1 -> . assign
    (48) statement_1 -> . cond
    (49) statement_1 -> . cloop
    (50) statement_1 -> . nloop
    (51) statement_1 -> . read
    (52) statement_1 -> . write
    (53) statement_1 -> . callfunc SEMICOL
    (54) statement_1 -> . histogram
    (55) statement_1 -> . scale SEMICOL
    (190) empty -> .
    (39) assign -> . ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL
    (57) cond -> . IF LPAR expression RPAR generate_g_if block cond_1 finish_if
    (63) cloop -> . WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end
    (64) nloop -> . FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e
    (74) read -> . READ LPAR read_1 RPAR SEMICOL
    (80) write -> . WRITE LPAR write_1 RPAR SEMICOL
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (56) histogram -> . HIST LPAR ID COMMA expression RPAR SEMICOL
    (136) scale -> . SCALE LPAR ID COMMA ID RPAR

    END             reduce using rule 190 (empty -> .)
    ID              shift and go to state 84
    IF              shift and go to state 97
    WHILE           shift and go to state 98
    FROM            shift and go to state 99
    READ            shift and go to state 100
    WRITE           shift and go to state 101
    HIST            shift and go to state 102
    SCALE           shift and go to state 103

    statement                      shift and go to state 109
    statement_1                    shift and go to state 86
    empty                          shift and go to state 87
    assign                         shift and go to state 88
    cond                           shift and go to state 89
    cloop                          shift and go to state 90
    nloop                          shift and go to state 91
    read                           shift and go to state 92
    write                          shift and go to state 93
    callfunc                       shift and go to state 94
    histogram                      shift and go to state 95
    scale                          shift and go to state 96

state 83

    (189) fill_main_goto -> empty .

    ID              reduce using rule 189 (fill_main_goto -> empty .)
    IF              reduce using rule 189 (fill_main_goto -> empty .)
    WHILE           reduce using rule 189 (fill_main_goto -> empty .)
    FROM            reduce using rule 189 (fill_main_goto -> empty .)
    READ            reduce using rule 189 (fill_main_goto -> empty .)
    WRITE           reduce using rule 189 (fill_main_goto -> empty .)
    HIST            reduce using rule 189 (fill_main_goto -> empty .)
    SCALE           reduce using rule 189 (fill_main_goto -> empty .)
    END             reduce using rule 189 (fill_main_goto -> empty .)


state 84

    (39) assign -> ID . see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL
    (69) callfunc -> ID . see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (138) see_id -> . empty
    (190) empty -> .

    LBRACK          reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)

    see_id                         shift and go to state 110
    empty                          shift and go to state 34

state 85

    (26) funcs -> FUNC rtype ID see_id see_func_start params LCURLY funcs_1 set_func_init statement . funcs_2 see_func_end RCURLY funcs_3
    (28) funcs_2 -> . RETURN expression SEMICOL
    (29) funcs_2 -> . empty
    (190) empty -> .

    RETURN          shift and go to state 112
    RCURLY          reduce using rule 190 (empty -> .)

    funcs_2                        shift and go to state 111
    empty                          shift and go to state 113

state 86

    (45) statement -> statement_1 . statement
    (45) statement -> . statement_1 statement
    (46) statement -> . empty
    (47) statement_1 -> . assign
    (48) statement_1 -> . cond
    (49) statement_1 -> . cloop
    (50) statement_1 -> . nloop
    (51) statement_1 -> . read
    (52) statement_1 -> . write
    (53) statement_1 -> . callfunc SEMICOL
    (54) statement_1 -> . histogram
    (55) statement_1 -> . scale SEMICOL
    (190) empty -> .
    (39) assign -> . ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL
    (57) cond -> . IF LPAR expression RPAR generate_g_if block cond_1 finish_if
    (63) cloop -> . WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end
    (64) nloop -> . FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e
    (74) read -> . READ LPAR read_1 RPAR SEMICOL
    (80) write -> . WRITE LPAR write_1 RPAR SEMICOL
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (56) histogram -> . HIST LPAR ID COMMA expression RPAR SEMICOL
    (136) scale -> . SCALE LPAR ID COMMA ID RPAR

    RETURN          reduce using rule 190 (empty -> .)
    RCURLY          reduce using rule 190 (empty -> .)
    END             reduce using rule 190 (empty -> .)
    ID              shift and go to state 84
    IF              shift and go to state 97
    WHILE           shift and go to state 98
    FROM            shift and go to state 99
    READ            shift and go to state 100
    WRITE           shift and go to state 101
    HIST            shift and go to state 102
    SCALE           shift and go to state 103

    statement_1                    shift and go to state 86
    statement                      shift and go to state 114
    empty                          shift and go to state 87
    assign                         shift and go to state 88
    cond                           shift and go to state 89
    cloop                          shift and go to state 90
    nloop                          shift and go to state 91
    read                           shift and go to state 92
    write                          shift and go to state 93
    callfunc                       shift and go to state 94
    histogram                      shift and go to state 95
    scale                          shift and go to state 96

state 87

    (46) statement -> empty .

    RETURN          reduce using rule 46 (statement -> empty .)
    RCURLY          reduce using rule 46 (statement -> empty .)
    END             reduce using rule 46 (statement -> empty .)


state 88

    (47) statement_1 -> assign .

    ID              reduce using rule 47 (statement_1 -> assign .)
    IF              reduce using rule 47 (statement_1 -> assign .)
    WHILE           reduce using rule 47 (statement_1 -> assign .)
    FROM            reduce using rule 47 (statement_1 -> assign .)
    READ            reduce using rule 47 (statement_1 -> assign .)
    WRITE           reduce using rule 47 (statement_1 -> assign .)
    HIST            reduce using rule 47 (statement_1 -> assign .)
    SCALE           reduce using rule 47 (statement_1 -> assign .)
    RETURN          reduce using rule 47 (statement_1 -> assign .)
    RCURLY          reduce using rule 47 (statement_1 -> assign .)
    END             reduce using rule 47 (statement_1 -> assign .)


state 89

    (48) statement_1 -> cond .

    ID              reduce using rule 48 (statement_1 -> cond .)
    IF              reduce using rule 48 (statement_1 -> cond .)
    WHILE           reduce using rule 48 (statement_1 -> cond .)
    FROM            reduce using rule 48 (statement_1 -> cond .)
    READ            reduce using rule 48 (statement_1 -> cond .)
    WRITE           reduce using rule 48 (statement_1 -> cond .)
    HIST            reduce using rule 48 (statement_1 -> cond .)
    SCALE           reduce using rule 48 (statement_1 -> cond .)
    RETURN          reduce using rule 48 (statement_1 -> cond .)
    RCURLY          reduce using rule 48 (statement_1 -> cond .)
    END             reduce using rule 48 (statement_1 -> cond .)


state 90

    (49) statement_1 -> cloop .

    ID              reduce using rule 49 (statement_1 -> cloop .)
    IF              reduce using rule 49 (statement_1 -> cloop .)
    WHILE           reduce using rule 49 (statement_1 -> cloop .)
    FROM            reduce using rule 49 (statement_1 -> cloop .)
    READ            reduce using rule 49 (statement_1 -> cloop .)
    WRITE           reduce using rule 49 (statement_1 -> cloop .)
    HIST            reduce using rule 49 (statement_1 -> cloop .)
    SCALE           reduce using rule 49 (statement_1 -> cloop .)
    RETURN          reduce using rule 49 (statement_1 -> cloop .)
    RCURLY          reduce using rule 49 (statement_1 -> cloop .)
    END             reduce using rule 49 (statement_1 -> cloop .)


state 91

    (50) statement_1 -> nloop .

    ID              reduce using rule 50 (statement_1 -> nloop .)
    IF              reduce using rule 50 (statement_1 -> nloop .)
    WHILE           reduce using rule 50 (statement_1 -> nloop .)
    FROM            reduce using rule 50 (statement_1 -> nloop .)
    READ            reduce using rule 50 (statement_1 -> nloop .)
    WRITE           reduce using rule 50 (statement_1 -> nloop .)
    HIST            reduce using rule 50 (statement_1 -> nloop .)
    SCALE           reduce using rule 50 (statement_1 -> nloop .)
    RETURN          reduce using rule 50 (statement_1 -> nloop .)
    RCURLY          reduce using rule 50 (statement_1 -> nloop .)
    END             reduce using rule 50 (statement_1 -> nloop .)


state 92

    (51) statement_1 -> read .

    ID              reduce using rule 51 (statement_1 -> read .)
    IF              reduce using rule 51 (statement_1 -> read .)
    WHILE           reduce using rule 51 (statement_1 -> read .)
    FROM            reduce using rule 51 (statement_1 -> read .)
    READ            reduce using rule 51 (statement_1 -> read .)
    WRITE           reduce using rule 51 (statement_1 -> read .)
    HIST            reduce using rule 51 (statement_1 -> read .)
    SCALE           reduce using rule 51 (statement_1 -> read .)
    RETURN          reduce using rule 51 (statement_1 -> read .)
    RCURLY          reduce using rule 51 (statement_1 -> read .)
    END             reduce using rule 51 (statement_1 -> read .)


state 93

    (52) statement_1 -> write .

    ID              reduce using rule 52 (statement_1 -> write .)
    IF              reduce using rule 52 (statement_1 -> write .)
    WHILE           reduce using rule 52 (statement_1 -> write .)
    FROM            reduce using rule 52 (statement_1 -> write .)
    READ            reduce using rule 52 (statement_1 -> write .)
    WRITE           reduce using rule 52 (statement_1 -> write .)
    HIST            reduce using rule 52 (statement_1 -> write .)
    SCALE           reduce using rule 52 (statement_1 -> write .)
    RETURN          reduce using rule 52 (statement_1 -> write .)
    RCURLY          reduce using rule 52 (statement_1 -> write .)
    END             reduce using rule 52 (statement_1 -> write .)


state 94

    (53) statement_1 -> callfunc . SEMICOL

    SEMICOL         shift and go to state 115


state 95

    (54) statement_1 -> histogram .

    ID              reduce using rule 54 (statement_1 -> histogram .)
    IF              reduce using rule 54 (statement_1 -> histogram .)
    WHILE           reduce using rule 54 (statement_1 -> histogram .)
    FROM            reduce using rule 54 (statement_1 -> histogram .)
    READ            reduce using rule 54 (statement_1 -> histogram .)
    WRITE           reduce using rule 54 (statement_1 -> histogram .)
    HIST            reduce using rule 54 (statement_1 -> histogram .)
    SCALE           reduce using rule 54 (statement_1 -> histogram .)
    RETURN          reduce using rule 54 (statement_1 -> histogram .)
    RCURLY          reduce using rule 54 (statement_1 -> histogram .)
    END             reduce using rule 54 (statement_1 -> histogram .)


state 96

    (55) statement_1 -> scale . SEMICOL

    SEMICOL         shift and go to state 116


state 97

    (57) cond -> IF . LPAR expression RPAR generate_g_if block cond_1 finish_if

    LPAR            shift and go to state 117


state 98

    (63) cloop -> WHILE . cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end
    (177) cloop_push_jump -> . empty
    (190) empty -> .

    LPAR            reduce using rule 190 (empty -> .)

    cloop_push_jump                shift and go to state 118
    empty                          shift and go to state 119

state 99

    (64) nloop -> FROM . ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e

    ID              shift and go to state 120


state 100

    (74) read -> READ . LPAR read_1 RPAR SEMICOL

    LPAR            shift and go to state 121


state 101

    (80) write -> WRITE . LPAR write_1 RPAR SEMICOL

    LPAR            shift and go to state 122


state 102

    (56) histogram -> HIST . LPAR ID COMMA expression RPAR SEMICOL

    LPAR            shift and go to state 123


state 103

    (136) scale -> SCALE . LPAR ID COMMA ID RPAR

    LPAR            shift and go to state 124


state 104

    (33) params_1 -> type ID see_id params_2 . see_end_param reset_dims params_3
    (151) see_end_param -> . empty
    (190) empty -> .

    COMMA           reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    see_end_param                  shift and go to state 125
    empty                          shift and go to state 126

state 105

    (35) params_2 -> dims .

    COMMA           reduce using rule 35 (params_2 -> dims .)
    RPAR            reduce using rule 35 (params_2 -> dims .)


state 106

    (36) params_2 -> empty .

    COMMA           reduce using rule 36 (params_2 -> empty .)
    RPAR            reduce using rule 36 (params_2 -> empty .)


state 107

    (42) dims -> LBRACK . see_dims expression generate_g_verify_f dims_1 RBRACK dims_end
    (139) see_dims -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    CTEI            reduce using rule 190 (empty -> .)
    CTEF            reduce using rule 190 (empty -> .)
    CTEB            reduce using rule 190 (empty -> .)
    CTEC            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)
    MEAN            reduce using rule 190 (empty -> .)
    MEDIAN          reduce using rule 190 (empty -> .)
    MODE            reduce using rule 190 (empty -> .)
    VARIANCE        reduce using rule 190 (empty -> .)
    SD              reduce using rule 190 (empty -> .)
    AVG             reduce using rule 190 (empty -> .)

    see_dims                       shift and go to state 127
    empty                          shift and go to state 128

state 108

    (13) dims_assign_1 -> COMMA see_dims_a CTEI . see_dims_num
    (145) see_dims_num -> . empty
    (190) empty -> .

    RBRACK          reduce using rule 190 (empty -> .)

    see_dims_num                   shift and go to state 129
    empty                          shift and go to state 66

state 109

    (129) main -> MAIN see_id LPAR RPAR LCURLY see_func_start main_1 set_func_init fill_main_goto statement . END SEMICOL RCURLY generate_end

    END             shift and go to state 130


state 110

    (39) assign -> ID see_id . push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL
    (69) callfunc -> ID see_id . verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (169) push_id -> . empty
    (183) verify_func -> . empty
    (190) empty -> .

    LBRACK          reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)

    push_id                        shift and go to state 131
    verify_func                    shift and go to state 132
    empty                          shift and go to state 133

state 111

    (26) funcs -> FUNC rtype ID see_id see_func_start params LCURLY funcs_1 set_func_init statement funcs_2 . see_func_end RCURLY funcs_3
    (149) see_func_end -> . empty
    (190) empty -> .

    RCURLY          reduce using rule 190 (empty -> .)

    see_func_end                   shift and go to state 134
    empty                          shift and go to state 135

state 112

    (28) funcs_2 -> RETURN . expression SEMICOL
    (86) expression -> . sexp check_and_or expression_1
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    expression                     shift and go to state 136
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 113

    (29) funcs_2 -> empty .

    RCURLY          reduce using rule 29 (funcs_2 -> empty .)


state 114

    (45) statement -> statement_1 statement .

    RETURN          reduce using rule 45 (statement -> statement_1 statement .)
    RCURLY          reduce using rule 45 (statement -> statement_1 statement .)
    END             reduce using rule 45 (statement -> statement_1 statement .)


state 115

    (53) statement_1 -> callfunc SEMICOL .

    ID              reduce using rule 53 (statement_1 -> callfunc SEMICOL .)
    IF              reduce using rule 53 (statement_1 -> callfunc SEMICOL .)
    WHILE           reduce using rule 53 (statement_1 -> callfunc SEMICOL .)
    FROM            reduce using rule 53 (statement_1 -> callfunc SEMICOL .)
    READ            reduce using rule 53 (statement_1 -> callfunc SEMICOL .)
    WRITE           reduce using rule 53 (statement_1 -> callfunc SEMICOL .)
    HIST            reduce using rule 53 (statement_1 -> callfunc SEMICOL .)
    SCALE           reduce using rule 53 (statement_1 -> callfunc SEMICOL .)
    RETURN          reduce using rule 53 (statement_1 -> callfunc SEMICOL .)
    RCURLY          reduce using rule 53 (statement_1 -> callfunc SEMICOL .)
    END             reduce using rule 53 (statement_1 -> callfunc SEMICOL .)


state 116

    (55) statement_1 -> scale SEMICOL .

    ID              reduce using rule 55 (statement_1 -> scale SEMICOL .)
    IF              reduce using rule 55 (statement_1 -> scale SEMICOL .)
    WHILE           reduce using rule 55 (statement_1 -> scale SEMICOL .)
    FROM            reduce using rule 55 (statement_1 -> scale SEMICOL .)
    READ            reduce using rule 55 (statement_1 -> scale SEMICOL .)
    WRITE           reduce using rule 55 (statement_1 -> scale SEMICOL .)
    HIST            reduce using rule 55 (statement_1 -> scale SEMICOL .)
    SCALE           reduce using rule 55 (statement_1 -> scale SEMICOL .)
    RETURN          reduce using rule 55 (statement_1 -> scale SEMICOL .)
    RCURLY          reduce using rule 55 (statement_1 -> scale SEMICOL .)
    END             reduce using rule 55 (statement_1 -> scale SEMICOL .)


state 117

    (57) cond -> IF LPAR . expression RPAR generate_g_if block cond_1 finish_if
    (86) expression -> . sexp check_and_or expression_1
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    expression                     shift and go to state 163
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 118

    (63) cloop -> WHILE cloop_push_jump . LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end

    LPAR            shift and go to state 164


state 119

    (177) cloop_push_jump -> empty .

    LPAR            reduce using rule 177 (cloop_push_jump -> empty .)


state 120

    (64) nloop -> FROM ID . see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e
    (138) see_id -> . empty
    (190) empty -> .

    LBRACK          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)

    see_id                         shift and go to state 165
    empty                          shift and go to state 34

state 121

    (74) read -> READ LPAR . read_1 RPAR SEMICOL
    (75) read_1 -> . ID see_id read_2 push_id generate_g_read read_3

    ID              shift and go to state 167

    read_1                         shift and go to state 166

state 122

    (80) write -> WRITE LPAR . write_1 RPAR SEMICOL
    (81) write_1 -> . write_2 generate_g_write write_3
    (82) write_2 -> . expression
    (83) write_2 -> . CTES push_string
    (86) expression -> . sexp check_and_or expression_1
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    CTES            shift and go to state 171
    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    write_1                        shift and go to state 168
    write_2                        shift and go to state 169
    expression                     shift and go to state 170
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 123

    (56) histogram -> HIST LPAR . ID COMMA expression RPAR SEMICOL

    ID              shift and go to state 172


state 124

    (136) scale -> SCALE LPAR . ID COMMA ID RPAR

    ID              shift and go to state 173


state 125

    (33) params_1 -> type ID see_id params_2 see_end_param . reset_dims params_3
    (152) reset_dims -> . empty
    (190) empty -> .

    COMMA           reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    reset_dims                     shift and go to state 174
    empty                          shift and go to state 175

state 126

    (151) see_end_param -> empty .

    COMMA           reduce using rule 151 (see_end_param -> empty .)
    RPAR            reduce using rule 151 (see_end_param -> empty .)


state 127

    (42) dims -> LBRACK see_dims . expression generate_g_verify_f dims_1 RBRACK dims_end
    (86) expression -> . sexp check_and_or expression_1
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    expression                     shift and go to state 176
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 128

    (139) see_dims -> empty .

    ID              reduce using rule 139 (see_dims -> empty .)
    CTEI            reduce using rule 139 (see_dims -> empty .)
    CTEF            reduce using rule 139 (see_dims -> empty .)
    CTEB            reduce using rule 139 (see_dims -> empty .)
    CTEC            reduce using rule 139 (see_dims -> empty .)
    MINUS           reduce using rule 139 (see_dims -> empty .)
    LPAR            reduce using rule 139 (see_dims -> empty .)
    MEAN            reduce using rule 139 (see_dims -> empty .)
    MEDIAN          reduce using rule 139 (see_dims -> empty .)
    MODE            reduce using rule 139 (see_dims -> empty .)
    VARIANCE        reduce using rule 139 (see_dims -> empty .)
    SD              reduce using rule 139 (see_dims -> empty .)
    AVG             reduce using rule 139 (see_dims -> empty .)


state 129

    (13) dims_assign_1 -> COMMA see_dims_a CTEI see_dims_num .

    RBRACK          reduce using rule 13 (dims_assign_1 -> COMMA see_dims_a CTEI see_dims_num .)


state 130

    (129) main -> MAIN see_id LPAR RPAR LCURLY see_func_start main_1 set_func_init fill_main_goto statement END . SEMICOL RCURLY generate_end

    SEMICOL         shift and go to state 177


state 131

    (39) assign -> ID see_id push_id . assign_1 EQUAL push_equal expression generate_assign SEMICOL
    (40) assign_1 -> . dims
    (41) assign_1 -> . empty
    (42) dims -> . LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end
    (190) empty -> .

    LBRACK          shift and go to state 107
    EQUAL           reduce using rule 190 (empty -> .)

    assign_1                       shift and go to state 178
    dims                           shift and go to state 179
    empty                          shift and go to state 180

state 132

    (69) callfunc -> ID see_id verify_func . LPAR activate_record callfunc_1 verify_p_num RPAR

    LPAR            shift and go to state 181


state 133

    (169) push_id -> empty .
    (183) verify_func -> empty .

    LBRACK          reduce using rule 169 (push_id -> empty .)
    EQUAL           reduce using rule 169 (push_id -> empty .)
    TIMES           reduce using rule 169 (push_id -> empty .)
    DIV             reduce using rule 169 (push_id -> empty .)
    PLUS            reduce using rule 169 (push_id -> empty .)
    MINUS           reduce using rule 169 (push_id -> empty .)
    ISEQUAL         reduce using rule 169 (push_id -> empty .)
    NOTEQUAL        reduce using rule 169 (push_id -> empty .)
    GREATERTHAN     reduce using rule 169 (push_id -> empty .)
    GREATERORQUAL   reduce using rule 169 (push_id -> empty .)
    LESSTHAN        reduce using rule 169 (push_id -> empty .)
    LESSOREQUAL     reduce using rule 169 (push_id -> empty .)
    OR              reduce using rule 169 (push_id -> empty .)
    AND             reduce using rule 169 (push_id -> empty .)
    SEMICOL         reduce using rule 169 (push_id -> empty .)
    RPAR            reduce using rule 169 (push_id -> empty .)
    COMMA           reduce using rule 169 (push_id -> empty .)
    RBRACK          reduce using rule 169 (push_id -> empty .)
    LCURLY          reduce using rule 169 (push_id -> empty .)
    TO              reduce using rule 169 (push_id -> empty .)
    LPAR            reduce using rule 183 (verify_func -> empty .)


state 134

    (26) funcs -> FUNC rtype ID see_id see_func_start params LCURLY funcs_1 set_func_init statement funcs_2 see_func_end . RCURLY funcs_3

    RCURLY          shift and go to state 182


state 135

    (149) see_func_end -> empty .

    RCURLY          reduce using rule 149 (see_func_end -> empty .)


state 136

    (28) funcs_2 -> RETURN expression . SEMICOL

    SEMICOL         shift and go to state 183


state 137

    (86) expression -> sexp . check_and_or expression_1
    (154) check_and_or -> . empty
    (190) empty -> .

    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    check_and_or                   shift and go to state 184
    empty                          shift and go to state 185

state 138

    (91) sexp -> exp . check_relational sexp_1
    (156) check_relational -> . empty
    (190) empty -> .

    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    check_relational               shift and go to state 186
    empty                          shift and go to state 187

state 139

    (101) exp -> term . check_sum exp_1
    (158) check_sum -> . empty
    (190) empty -> .

    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    check_sum                      shift and go to state 188
    empty                          shift and go to state 189

state 140

    (106) term -> factor . check_mul_div term_1
    (160) check_mul_div -> . empty
    (190) empty -> .

    TIMES           reduce using rule 190 (empty -> .)
    DIV             reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    check_mul_div                  shift and go to state 190
    empty                          shift and go to state 191

state 141

    (111) factor -> factor_1 .

    TIMES           reduce using rule 111 (factor -> factor_1 .)
    DIV             reduce using rule 111 (factor -> factor_1 .)
    PLUS            reduce using rule 111 (factor -> factor_1 .)
    MINUS           reduce using rule 111 (factor -> factor_1 .)
    ISEQUAL         reduce using rule 111 (factor -> factor_1 .)
    EQUAL           reduce using rule 111 (factor -> factor_1 .)
    NOTEQUAL        reduce using rule 111 (factor -> factor_1 .)
    GREATERTHAN     reduce using rule 111 (factor -> factor_1 .)
    GREATERORQUAL   reduce using rule 111 (factor -> factor_1 .)
    LESSTHAN        reduce using rule 111 (factor -> factor_1 .)
    LESSOREQUAL     reduce using rule 111 (factor -> factor_1 .)
    OR              reduce using rule 111 (factor -> factor_1 .)
    AND             reduce using rule 111 (factor -> factor_1 .)
    SEMICOL         reduce using rule 111 (factor -> factor_1 .)
    RPAR            reduce using rule 111 (factor -> factor_1 .)
    COMMA           reduce using rule 111 (factor -> factor_1 .)
    RBRACK          reduce using rule 111 (factor -> factor_1 .)
    LCURLY          reduce using rule 111 (factor -> factor_1 .)
    TO              reduce using rule 111 (factor -> factor_1 .)


state 142

    (112) factor -> factor_2 .

    TIMES           reduce using rule 112 (factor -> factor_2 .)
    DIV             reduce using rule 112 (factor -> factor_2 .)
    PLUS            reduce using rule 112 (factor -> factor_2 .)
    MINUS           reduce using rule 112 (factor -> factor_2 .)
    ISEQUAL         reduce using rule 112 (factor -> factor_2 .)
    EQUAL           reduce using rule 112 (factor -> factor_2 .)
    NOTEQUAL        reduce using rule 112 (factor -> factor_2 .)
    GREATERTHAN     reduce using rule 112 (factor -> factor_2 .)
    GREATERORQUAL   reduce using rule 112 (factor -> factor_2 .)
    LESSTHAN        reduce using rule 112 (factor -> factor_2 .)
    LESSOREQUAL     reduce using rule 112 (factor -> factor_2 .)
    OR              reduce using rule 112 (factor -> factor_2 .)
    AND             reduce using rule 112 (factor -> factor_2 .)
    SEMICOL         reduce using rule 112 (factor -> factor_2 .)
    RPAR            reduce using rule 112 (factor -> factor_2 .)
    COMMA           reduce using rule 112 (factor -> factor_2 .)
    RBRACK          reduce using rule 112 (factor -> factor_2 .)
    LCURLY          reduce using rule 112 (factor -> factor_2 .)
    TO              reduce using rule 112 (factor -> factor_2 .)


state 143

    (113) factor_1 -> ID . see_id push_id factor_3 print_value reset_dims
    (69) callfunc -> ID . see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (138) see_id -> . empty
    (190) empty -> .

    LBRACK          reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)
    TIMES           reduce using rule 190 (empty -> .)
    DIV             reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    see_id                         shift and go to state 192
    empty                          shift and go to state 34

state 144

    (114) factor_1 -> callfunc .

    TIMES           reduce using rule 114 (factor_1 -> callfunc .)
    DIV             reduce using rule 114 (factor_1 -> callfunc .)
    PLUS            reduce using rule 114 (factor_1 -> callfunc .)
    MINUS           reduce using rule 114 (factor_1 -> callfunc .)
    ISEQUAL         reduce using rule 114 (factor_1 -> callfunc .)
    EQUAL           reduce using rule 114 (factor_1 -> callfunc .)
    NOTEQUAL        reduce using rule 114 (factor_1 -> callfunc .)
    GREATERTHAN     reduce using rule 114 (factor_1 -> callfunc .)
    GREATERORQUAL   reduce using rule 114 (factor_1 -> callfunc .)
    LESSTHAN        reduce using rule 114 (factor_1 -> callfunc .)
    LESSOREQUAL     reduce using rule 114 (factor_1 -> callfunc .)
    OR              reduce using rule 114 (factor_1 -> callfunc .)
    AND             reduce using rule 114 (factor_1 -> callfunc .)
    SEMICOL         reduce using rule 114 (factor_1 -> callfunc .)
    RPAR            reduce using rule 114 (factor_1 -> callfunc .)
    COMMA           reduce using rule 114 (factor_1 -> callfunc .)
    RBRACK          reduce using rule 114 (factor_1 -> callfunc .)
    LCURLY          reduce using rule 114 (factor_1 -> callfunc .)
    TO              reduce using rule 114 (factor_1 -> callfunc .)


state 145

    (115) factor_1 -> CTEI . push_int
    (164) push_int -> . empty
    (190) empty -> .

    TIMES           reduce using rule 190 (empty -> .)
    DIV             reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    push_int                       shift and go to state 193
    empty                          shift and go to state 194

state 146

    (116) factor_1 -> CTEF . push_float
    (165) push_float -> . empty
    (190) empty -> .

    TIMES           reduce using rule 190 (empty -> .)
    DIV             reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    push_float                     shift and go to state 195
    empty                          shift and go to state 196

state 147

    (117) factor_1 -> CTEB . push_bool
    (166) push_bool -> . empty
    (190) empty -> .

    TIMES           reduce using rule 190 (empty -> .)
    DIV             reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    push_bool                      shift and go to state 197
    empty                          shift and go to state 198

state 148

    (118) factor_1 -> CTEC . push_char
    (167) push_char -> . empty
    (190) empty -> .

    TIMES           reduce using rule 190 (empty -> .)
    DIV             reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    push_char                      shift and go to state 199
    empty                          shift and go to state 200

state 149

    (119) factor_1 -> MINUS . factor_1
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    factor_1                       shift and go to state 201
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 150

    (120) factor_1 -> mean .

    TIMES           reduce using rule 120 (factor_1 -> mean .)
    DIV             reduce using rule 120 (factor_1 -> mean .)
    PLUS            reduce using rule 120 (factor_1 -> mean .)
    MINUS           reduce using rule 120 (factor_1 -> mean .)
    ISEQUAL         reduce using rule 120 (factor_1 -> mean .)
    EQUAL           reduce using rule 120 (factor_1 -> mean .)
    NOTEQUAL        reduce using rule 120 (factor_1 -> mean .)
    GREATERTHAN     reduce using rule 120 (factor_1 -> mean .)
    GREATERORQUAL   reduce using rule 120 (factor_1 -> mean .)
    LESSTHAN        reduce using rule 120 (factor_1 -> mean .)
    LESSOREQUAL     reduce using rule 120 (factor_1 -> mean .)
    OR              reduce using rule 120 (factor_1 -> mean .)
    AND             reduce using rule 120 (factor_1 -> mean .)
    SEMICOL         reduce using rule 120 (factor_1 -> mean .)
    RPAR            reduce using rule 120 (factor_1 -> mean .)
    COMMA           reduce using rule 120 (factor_1 -> mean .)
    RBRACK          reduce using rule 120 (factor_1 -> mean .)
    LCURLY          reduce using rule 120 (factor_1 -> mean .)
    TO              reduce using rule 120 (factor_1 -> mean .)


state 151

    (121) factor_1 -> median .

    TIMES           reduce using rule 121 (factor_1 -> median .)
    DIV             reduce using rule 121 (factor_1 -> median .)
    PLUS            reduce using rule 121 (factor_1 -> median .)
    MINUS           reduce using rule 121 (factor_1 -> median .)
    ISEQUAL         reduce using rule 121 (factor_1 -> median .)
    EQUAL           reduce using rule 121 (factor_1 -> median .)
    NOTEQUAL        reduce using rule 121 (factor_1 -> median .)
    GREATERTHAN     reduce using rule 121 (factor_1 -> median .)
    GREATERORQUAL   reduce using rule 121 (factor_1 -> median .)
    LESSTHAN        reduce using rule 121 (factor_1 -> median .)
    LESSOREQUAL     reduce using rule 121 (factor_1 -> median .)
    OR              reduce using rule 121 (factor_1 -> median .)
    AND             reduce using rule 121 (factor_1 -> median .)
    SEMICOL         reduce using rule 121 (factor_1 -> median .)
    RPAR            reduce using rule 121 (factor_1 -> median .)
    COMMA           reduce using rule 121 (factor_1 -> median .)
    RBRACK          reduce using rule 121 (factor_1 -> median .)
    LCURLY          reduce using rule 121 (factor_1 -> median .)
    TO              reduce using rule 121 (factor_1 -> median .)


state 152

    (122) factor_1 -> mode .

    TIMES           reduce using rule 122 (factor_1 -> mode .)
    DIV             reduce using rule 122 (factor_1 -> mode .)
    PLUS            reduce using rule 122 (factor_1 -> mode .)
    MINUS           reduce using rule 122 (factor_1 -> mode .)
    ISEQUAL         reduce using rule 122 (factor_1 -> mode .)
    EQUAL           reduce using rule 122 (factor_1 -> mode .)
    NOTEQUAL        reduce using rule 122 (factor_1 -> mode .)
    GREATERTHAN     reduce using rule 122 (factor_1 -> mode .)
    GREATERORQUAL   reduce using rule 122 (factor_1 -> mode .)
    LESSTHAN        reduce using rule 122 (factor_1 -> mode .)
    LESSOREQUAL     reduce using rule 122 (factor_1 -> mode .)
    OR              reduce using rule 122 (factor_1 -> mode .)
    AND             reduce using rule 122 (factor_1 -> mode .)
    SEMICOL         reduce using rule 122 (factor_1 -> mode .)
    RPAR            reduce using rule 122 (factor_1 -> mode .)
    COMMA           reduce using rule 122 (factor_1 -> mode .)
    RBRACK          reduce using rule 122 (factor_1 -> mode .)
    LCURLY          reduce using rule 122 (factor_1 -> mode .)
    TO              reduce using rule 122 (factor_1 -> mode .)


state 153

    (123) factor_1 -> variance .

    TIMES           reduce using rule 123 (factor_1 -> variance .)
    DIV             reduce using rule 123 (factor_1 -> variance .)
    PLUS            reduce using rule 123 (factor_1 -> variance .)
    MINUS           reduce using rule 123 (factor_1 -> variance .)
    ISEQUAL         reduce using rule 123 (factor_1 -> variance .)
    EQUAL           reduce using rule 123 (factor_1 -> variance .)
    NOTEQUAL        reduce using rule 123 (factor_1 -> variance .)
    GREATERTHAN     reduce using rule 123 (factor_1 -> variance .)
    GREATERORQUAL   reduce using rule 123 (factor_1 -> variance .)
    LESSTHAN        reduce using rule 123 (factor_1 -> variance .)
    LESSOREQUAL     reduce using rule 123 (factor_1 -> variance .)
    OR              reduce using rule 123 (factor_1 -> variance .)
    AND             reduce using rule 123 (factor_1 -> variance .)
    SEMICOL         reduce using rule 123 (factor_1 -> variance .)
    RPAR            reduce using rule 123 (factor_1 -> variance .)
    COMMA           reduce using rule 123 (factor_1 -> variance .)
    RBRACK          reduce using rule 123 (factor_1 -> variance .)
    LCURLY          reduce using rule 123 (factor_1 -> variance .)
    TO              reduce using rule 123 (factor_1 -> variance .)


state 154

    (124) factor_1 -> standard_deviation .

    TIMES           reduce using rule 124 (factor_1 -> standard_deviation .)
    DIV             reduce using rule 124 (factor_1 -> standard_deviation .)
    PLUS            reduce using rule 124 (factor_1 -> standard_deviation .)
    MINUS           reduce using rule 124 (factor_1 -> standard_deviation .)
    ISEQUAL         reduce using rule 124 (factor_1 -> standard_deviation .)
    EQUAL           reduce using rule 124 (factor_1 -> standard_deviation .)
    NOTEQUAL        reduce using rule 124 (factor_1 -> standard_deviation .)
    GREATERTHAN     reduce using rule 124 (factor_1 -> standard_deviation .)
    GREATERORQUAL   reduce using rule 124 (factor_1 -> standard_deviation .)
    LESSTHAN        reduce using rule 124 (factor_1 -> standard_deviation .)
    LESSOREQUAL     reduce using rule 124 (factor_1 -> standard_deviation .)
    OR              reduce using rule 124 (factor_1 -> standard_deviation .)
    AND             reduce using rule 124 (factor_1 -> standard_deviation .)
    SEMICOL         reduce using rule 124 (factor_1 -> standard_deviation .)
    RPAR            reduce using rule 124 (factor_1 -> standard_deviation .)
    COMMA           reduce using rule 124 (factor_1 -> standard_deviation .)
    RBRACK          reduce using rule 124 (factor_1 -> standard_deviation .)
    LCURLY          reduce using rule 124 (factor_1 -> standard_deviation .)
    TO              reduce using rule 124 (factor_1 -> standard_deviation .)


state 155

    (125) factor_1 -> average .

    TIMES           reduce using rule 125 (factor_1 -> average .)
    DIV             reduce using rule 125 (factor_1 -> average .)
    PLUS            reduce using rule 125 (factor_1 -> average .)
    MINUS           reduce using rule 125 (factor_1 -> average .)
    ISEQUAL         reduce using rule 125 (factor_1 -> average .)
    EQUAL           reduce using rule 125 (factor_1 -> average .)
    NOTEQUAL        reduce using rule 125 (factor_1 -> average .)
    GREATERTHAN     reduce using rule 125 (factor_1 -> average .)
    GREATERORQUAL   reduce using rule 125 (factor_1 -> average .)
    LESSTHAN        reduce using rule 125 (factor_1 -> average .)
    LESSOREQUAL     reduce using rule 125 (factor_1 -> average .)
    OR              reduce using rule 125 (factor_1 -> average .)
    AND             reduce using rule 125 (factor_1 -> average .)
    SEMICOL         reduce using rule 125 (factor_1 -> average .)
    RPAR            reduce using rule 125 (factor_1 -> average .)
    COMMA           reduce using rule 125 (factor_1 -> average .)
    RBRACK          reduce using rule 125 (factor_1 -> average .)
    LCURLY          reduce using rule 125 (factor_1 -> average .)
    TO              reduce using rule 125 (factor_1 -> average .)


state 156

    (126) factor_2 -> LPAR . add_ff expression RPAR pop_ff
    (162) add_ff -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    CTEI            reduce using rule 190 (empty -> .)
    CTEF            reduce using rule 190 (empty -> .)
    CTEB            reduce using rule 190 (empty -> .)
    CTEC            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)
    MEAN            reduce using rule 190 (empty -> .)
    MEDIAN          reduce using rule 190 (empty -> .)
    MODE            reduce using rule 190 (empty -> .)
    VARIANCE        reduce using rule 190 (empty -> .)
    SD              reduce using rule 190 (empty -> .)
    AVG             reduce using rule 190 (empty -> .)

    add_ff                         shift and go to state 202
    empty                          shift and go to state 203

state 157

    (131) mean -> MEAN . LPAR ID RPAR

    LPAR            shift and go to state 204


state 158

    (132) median -> MEDIAN . LPAR ID RPAR

    LPAR            shift and go to state 205


state 159

    (133) mode -> MODE . LPAR ID RPAR

    LPAR            shift and go to state 206


state 160

    (134) variance -> VARIANCE . LPAR ID RPAR

    LPAR            shift and go to state 207


state 161

    (135) standard_deviation -> SD . LPAR ID RPAR

    LPAR            shift and go to state 208


state 162

    (137) average -> AVG . LPAR ID RPAR

    LPAR            shift and go to state 209


state 163

    (57) cond -> IF LPAR expression . RPAR generate_g_if block cond_1 finish_if

    RPAR            shift and go to state 210


state 164

    (63) cloop -> WHILE cloop_push_jump LPAR . expression generate_g_cloop_start RPAR block generate_g_cloop_end
    (86) expression -> . sexp check_and_or expression_1
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    expression                     shift and go to state 211
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 165

    (64) nloop -> FROM ID see_id . nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e
    (65) nloop_1 -> . dims
    (66) nloop_1 -> . empty
    (42) dims -> . LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end
    (190) empty -> .

    LBRACK          shift and go to state 107
    TO              reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)

    nloop_1                        shift and go to state 212
    dims                           shift and go to state 213
    empty                          shift and go to state 214

state 166

    (74) read -> READ LPAR read_1 . RPAR SEMICOL

    RPAR            shift and go to state 215


state 167

    (75) read_1 -> ID . see_id read_2 push_id generate_g_read read_3
    (138) see_id -> . empty
    (190) empty -> .

    LBRACK          reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    see_id                         shift and go to state 216
    empty                          shift and go to state 34

state 168

    (80) write -> WRITE LPAR write_1 . RPAR SEMICOL

    RPAR            shift and go to state 217


state 169

    (81) write_1 -> write_2 . generate_g_write write_3
    (176) generate_g_write -> . empty
    (190) empty -> .

    COMMA           reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    generate_g_write               shift and go to state 218
    empty                          shift and go to state 219

state 170

    (82) write_2 -> expression .

    COMMA           reduce using rule 82 (write_2 -> expression .)
    RPAR            reduce using rule 82 (write_2 -> expression .)


state 171

    (83) write_2 -> CTES . push_string
    (168) push_string -> . empty
    (190) empty -> .

    COMMA           reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    push_string                    shift and go to state 220
    empty                          shift and go to state 221

state 172

    (56) histogram -> HIST LPAR ID . COMMA expression RPAR SEMICOL

    COMMA           shift and go to state 222


state 173

    (136) scale -> SCALE LPAR ID . COMMA ID RPAR

    COMMA           shift and go to state 223


state 174

    (33) params_1 -> type ID see_id params_2 see_end_param reset_dims . params_3
    (37) params_3 -> . COMMA params_1
    (38) params_3 -> . empty
    (190) empty -> .

    COMMA           shift and go to state 225
    RPAR            reduce using rule 190 (empty -> .)

    params_3                       shift and go to state 224
    empty                          shift and go to state 226

state 175

    (152) reset_dims -> empty .

    COMMA           reduce using rule 152 (reset_dims -> empty .)
    RPAR            reduce using rule 152 (reset_dims -> empty .)
    TIMES           reduce using rule 152 (reset_dims -> empty .)
    DIV             reduce using rule 152 (reset_dims -> empty .)
    PLUS            reduce using rule 152 (reset_dims -> empty .)
    MINUS           reduce using rule 152 (reset_dims -> empty .)
    ISEQUAL         reduce using rule 152 (reset_dims -> empty .)
    EQUAL           reduce using rule 152 (reset_dims -> empty .)
    NOTEQUAL        reduce using rule 152 (reset_dims -> empty .)
    GREATERTHAN     reduce using rule 152 (reset_dims -> empty .)
    GREATERORQUAL   reduce using rule 152 (reset_dims -> empty .)
    LESSTHAN        reduce using rule 152 (reset_dims -> empty .)
    LESSOREQUAL     reduce using rule 152 (reset_dims -> empty .)
    OR              reduce using rule 152 (reset_dims -> empty .)
    AND             reduce using rule 152 (reset_dims -> empty .)
    SEMICOL         reduce using rule 152 (reset_dims -> empty .)
    RBRACK          reduce using rule 152 (reset_dims -> empty .)
    LCURLY          reduce using rule 152 (reset_dims -> empty .)
    TO              reduce using rule 152 (reset_dims -> empty .)


state 176

    (42) dims -> LBRACK see_dims expression . generate_g_verify_f dims_1 RBRACK dims_end
    (141) generate_g_verify_f -> . empty
    (190) empty -> .

    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)

    generate_g_verify_f            shift and go to state 227
    empty                          shift and go to state 228

state 177

    (129) main -> MAIN see_id LPAR RPAR LCURLY see_func_start main_1 set_func_init fill_main_goto statement END SEMICOL . RCURLY generate_end

    RCURLY          shift and go to state 229


state 178

    (39) assign -> ID see_id push_id assign_1 . EQUAL push_equal expression generate_assign SEMICOL

    EQUAL           shift and go to state 230


state 179

    (40) assign_1 -> dims .

    EQUAL           reduce using rule 40 (assign_1 -> dims .)


state 180

    (41) assign_1 -> empty .

    EQUAL           reduce using rule 41 (assign_1 -> empty .)


state 181

    (69) callfunc -> ID see_id verify_func LPAR . activate_record callfunc_1 verify_p_num RPAR
    (184) activate_record -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    CTEI            reduce using rule 190 (empty -> .)
    CTEF            reduce using rule 190 (empty -> .)
    CTEB            reduce using rule 190 (empty -> .)
    CTEC            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)
    MEAN            reduce using rule 190 (empty -> .)
    MEDIAN          reduce using rule 190 (empty -> .)
    MODE            reduce using rule 190 (empty -> .)
    VARIANCE        reduce using rule 190 (empty -> .)
    SD              reduce using rule 190 (empty -> .)
    AVG             reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    activate_record                shift and go to state 231
    empty                          shift and go to state 232

state 182

    (26) funcs -> FUNC rtype ID see_id see_func_start params LCURLY funcs_1 set_func_init statement funcs_2 see_func_end RCURLY . funcs_3
    (30) funcs_3 -> . funcs
    (31) funcs_3 -> . empty
    (26) funcs -> . FUNC rtype ID see_id see_func_start params LCURLY funcs_1 set_func_init statement funcs_2 see_func_end RCURLY funcs_3
    (190) empty -> .

    FUNC            shift and go to state 21
    MAIN            reduce using rule 190 (empty -> .)

    funcs_3                        shift and go to state 233
    funcs                          shift and go to state 234
    empty                          shift and go to state 235

state 183

    (28) funcs_2 -> RETURN expression SEMICOL .

    RCURLY          reduce using rule 28 (funcs_2 -> RETURN expression SEMICOL .)


state 184

    (86) expression -> sexp check_and_or . expression_1
    (87) expression_1 -> . expression_2 push_and_or expression
    (88) expression_1 -> . empty
    (89) expression_2 -> . OR
    (90) expression_2 -> . AND
    (190) empty -> .

    OR              shift and go to state 239
    AND             shift and go to state 240
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    expression_1                   shift and go to state 236
    expression_2                   shift and go to state 237
    empty                          shift and go to state 238

state 185

    (154) check_and_or -> empty .

    OR              reduce using rule 154 (check_and_or -> empty .)
    AND             reduce using rule 154 (check_and_or -> empty .)
    SEMICOL         reduce using rule 154 (check_and_or -> empty .)
    RPAR            reduce using rule 154 (check_and_or -> empty .)
    COMMA           reduce using rule 154 (check_and_or -> empty .)
    RBRACK          reduce using rule 154 (check_and_or -> empty .)
    LCURLY          reduce using rule 154 (check_and_or -> empty .)
    TO              reduce using rule 154 (check_and_or -> empty .)


state 186

    (91) sexp -> exp check_relational . sexp_1
    (92) sexp_1 -> . sexp_2 push_relational sexp
    (93) sexp_1 -> . empty
    (94) sexp_2 -> . ISEQUAL
    (95) sexp_2 -> . EQUAL
    (96) sexp_2 -> . NOTEQUAL
    (97) sexp_2 -> . GREATERTHAN
    (98) sexp_2 -> . GREATERORQUAL
    (99) sexp_2 -> . LESSTHAN
    (100) sexp_2 -> . LESSOREQUAL
    (190) empty -> .

    ISEQUAL         shift and go to state 244
    EQUAL           shift and go to state 245
    NOTEQUAL        shift and go to state 246
    GREATERTHAN     shift and go to state 247
    GREATERORQUAL   shift and go to state 248
    LESSTHAN        shift and go to state 249
    LESSOREQUAL     shift and go to state 250
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    sexp_1                         shift and go to state 241
    sexp_2                         shift and go to state 242
    empty                          shift and go to state 243

state 187

    (156) check_relational -> empty .

    ISEQUAL         reduce using rule 156 (check_relational -> empty .)
    EQUAL           reduce using rule 156 (check_relational -> empty .)
    NOTEQUAL        reduce using rule 156 (check_relational -> empty .)
    GREATERTHAN     reduce using rule 156 (check_relational -> empty .)
    GREATERORQUAL   reduce using rule 156 (check_relational -> empty .)
    LESSTHAN        reduce using rule 156 (check_relational -> empty .)
    LESSOREQUAL     reduce using rule 156 (check_relational -> empty .)
    OR              reduce using rule 156 (check_relational -> empty .)
    AND             reduce using rule 156 (check_relational -> empty .)
    SEMICOL         reduce using rule 156 (check_relational -> empty .)
    RPAR            reduce using rule 156 (check_relational -> empty .)
    COMMA           reduce using rule 156 (check_relational -> empty .)
    RBRACK          reduce using rule 156 (check_relational -> empty .)
    LCURLY          reduce using rule 156 (check_relational -> empty .)
    TO              reduce using rule 156 (check_relational -> empty .)


state 188

    (101) exp -> term check_sum . exp_1
    (102) exp_1 -> . exp_2 push_sum exp
    (103) exp_1 -> . empty
    (104) exp_2 -> . PLUS
    (105) exp_2 -> . MINUS
    (190) empty -> .

    PLUS            shift and go to state 254
    MINUS           shift and go to state 255
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    exp_1                          shift and go to state 251
    exp_2                          shift and go to state 252
    empty                          shift and go to state 253

state 189

    (158) check_sum -> empty .

    PLUS            reduce using rule 158 (check_sum -> empty .)
    MINUS           reduce using rule 158 (check_sum -> empty .)
    ISEQUAL         reduce using rule 158 (check_sum -> empty .)
    EQUAL           reduce using rule 158 (check_sum -> empty .)
    NOTEQUAL        reduce using rule 158 (check_sum -> empty .)
    GREATERTHAN     reduce using rule 158 (check_sum -> empty .)
    GREATERORQUAL   reduce using rule 158 (check_sum -> empty .)
    LESSTHAN        reduce using rule 158 (check_sum -> empty .)
    LESSOREQUAL     reduce using rule 158 (check_sum -> empty .)
    OR              reduce using rule 158 (check_sum -> empty .)
    AND             reduce using rule 158 (check_sum -> empty .)
    SEMICOL         reduce using rule 158 (check_sum -> empty .)
    RPAR            reduce using rule 158 (check_sum -> empty .)
    COMMA           reduce using rule 158 (check_sum -> empty .)
    RBRACK          reduce using rule 158 (check_sum -> empty .)
    LCURLY          reduce using rule 158 (check_sum -> empty .)
    TO              reduce using rule 158 (check_sum -> empty .)


state 190

    (106) term -> factor check_mul_div . term_1
    (107) term_1 -> . term_2 push_mul_div term
    (108) term_1 -> . empty
    (109) term_2 -> . TIMES
    (110) term_2 -> . DIV
    (190) empty -> .

    TIMES           shift and go to state 259
    DIV             shift and go to state 260
    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    term_1                         shift and go to state 256
    term_2                         shift and go to state 257
    empty                          shift and go to state 258

state 191

    (160) check_mul_div -> empty .

    TIMES           reduce using rule 160 (check_mul_div -> empty .)
    DIV             reduce using rule 160 (check_mul_div -> empty .)
    PLUS            reduce using rule 160 (check_mul_div -> empty .)
    MINUS           reduce using rule 160 (check_mul_div -> empty .)
    ISEQUAL         reduce using rule 160 (check_mul_div -> empty .)
    EQUAL           reduce using rule 160 (check_mul_div -> empty .)
    NOTEQUAL        reduce using rule 160 (check_mul_div -> empty .)
    GREATERTHAN     reduce using rule 160 (check_mul_div -> empty .)
    GREATERORQUAL   reduce using rule 160 (check_mul_div -> empty .)
    LESSTHAN        reduce using rule 160 (check_mul_div -> empty .)
    LESSOREQUAL     reduce using rule 160 (check_mul_div -> empty .)
    OR              reduce using rule 160 (check_mul_div -> empty .)
    AND             reduce using rule 160 (check_mul_div -> empty .)
    SEMICOL         reduce using rule 160 (check_mul_div -> empty .)
    RPAR            reduce using rule 160 (check_mul_div -> empty .)
    COMMA           reduce using rule 160 (check_mul_div -> empty .)
    RBRACK          reduce using rule 160 (check_mul_div -> empty .)
    LCURLY          reduce using rule 160 (check_mul_div -> empty .)
    TO              reduce using rule 160 (check_mul_div -> empty .)


state 192

    (113) factor_1 -> ID see_id . push_id factor_3 print_value reset_dims
    (69) callfunc -> ID see_id . verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (169) push_id -> . empty
    (183) verify_func -> . empty
    (190) empty -> .

    LBRACK          reduce using rule 190 (empty -> .)
    TIMES           reduce using rule 190 (empty -> .)
    DIV             reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)

    push_id                        shift and go to state 261
    verify_func                    shift and go to state 132
    empty                          shift and go to state 133

state 193

    (115) factor_1 -> CTEI push_int .

    TIMES           reduce using rule 115 (factor_1 -> CTEI push_int .)
    DIV             reduce using rule 115 (factor_1 -> CTEI push_int .)
    PLUS            reduce using rule 115 (factor_1 -> CTEI push_int .)
    MINUS           reduce using rule 115 (factor_1 -> CTEI push_int .)
    ISEQUAL         reduce using rule 115 (factor_1 -> CTEI push_int .)
    EQUAL           reduce using rule 115 (factor_1 -> CTEI push_int .)
    NOTEQUAL        reduce using rule 115 (factor_1 -> CTEI push_int .)
    GREATERTHAN     reduce using rule 115 (factor_1 -> CTEI push_int .)
    GREATERORQUAL   reduce using rule 115 (factor_1 -> CTEI push_int .)
    LESSTHAN        reduce using rule 115 (factor_1 -> CTEI push_int .)
    LESSOREQUAL     reduce using rule 115 (factor_1 -> CTEI push_int .)
    OR              reduce using rule 115 (factor_1 -> CTEI push_int .)
    AND             reduce using rule 115 (factor_1 -> CTEI push_int .)
    SEMICOL         reduce using rule 115 (factor_1 -> CTEI push_int .)
    RPAR            reduce using rule 115 (factor_1 -> CTEI push_int .)
    COMMA           reduce using rule 115 (factor_1 -> CTEI push_int .)
    RBRACK          reduce using rule 115 (factor_1 -> CTEI push_int .)
    LCURLY          reduce using rule 115 (factor_1 -> CTEI push_int .)
    TO              reduce using rule 115 (factor_1 -> CTEI push_int .)


state 194

    (164) push_int -> empty .

    TIMES           reduce using rule 164 (push_int -> empty .)
    DIV             reduce using rule 164 (push_int -> empty .)
    PLUS            reduce using rule 164 (push_int -> empty .)
    MINUS           reduce using rule 164 (push_int -> empty .)
    ISEQUAL         reduce using rule 164 (push_int -> empty .)
    EQUAL           reduce using rule 164 (push_int -> empty .)
    NOTEQUAL        reduce using rule 164 (push_int -> empty .)
    GREATERTHAN     reduce using rule 164 (push_int -> empty .)
    GREATERORQUAL   reduce using rule 164 (push_int -> empty .)
    LESSTHAN        reduce using rule 164 (push_int -> empty .)
    LESSOREQUAL     reduce using rule 164 (push_int -> empty .)
    OR              reduce using rule 164 (push_int -> empty .)
    AND             reduce using rule 164 (push_int -> empty .)
    SEMICOL         reduce using rule 164 (push_int -> empty .)
    RPAR            reduce using rule 164 (push_int -> empty .)
    COMMA           reduce using rule 164 (push_int -> empty .)
    RBRACK          reduce using rule 164 (push_int -> empty .)
    LCURLY          reduce using rule 164 (push_int -> empty .)
    TO              reduce using rule 164 (push_int -> empty .)


state 195

    (116) factor_1 -> CTEF push_float .

    TIMES           reduce using rule 116 (factor_1 -> CTEF push_float .)
    DIV             reduce using rule 116 (factor_1 -> CTEF push_float .)
    PLUS            reduce using rule 116 (factor_1 -> CTEF push_float .)
    MINUS           reduce using rule 116 (factor_1 -> CTEF push_float .)
    ISEQUAL         reduce using rule 116 (factor_1 -> CTEF push_float .)
    EQUAL           reduce using rule 116 (factor_1 -> CTEF push_float .)
    NOTEQUAL        reduce using rule 116 (factor_1 -> CTEF push_float .)
    GREATERTHAN     reduce using rule 116 (factor_1 -> CTEF push_float .)
    GREATERORQUAL   reduce using rule 116 (factor_1 -> CTEF push_float .)
    LESSTHAN        reduce using rule 116 (factor_1 -> CTEF push_float .)
    LESSOREQUAL     reduce using rule 116 (factor_1 -> CTEF push_float .)
    OR              reduce using rule 116 (factor_1 -> CTEF push_float .)
    AND             reduce using rule 116 (factor_1 -> CTEF push_float .)
    SEMICOL         reduce using rule 116 (factor_1 -> CTEF push_float .)
    RPAR            reduce using rule 116 (factor_1 -> CTEF push_float .)
    COMMA           reduce using rule 116 (factor_1 -> CTEF push_float .)
    RBRACK          reduce using rule 116 (factor_1 -> CTEF push_float .)
    LCURLY          reduce using rule 116 (factor_1 -> CTEF push_float .)
    TO              reduce using rule 116 (factor_1 -> CTEF push_float .)


state 196

    (165) push_float -> empty .

    TIMES           reduce using rule 165 (push_float -> empty .)
    DIV             reduce using rule 165 (push_float -> empty .)
    PLUS            reduce using rule 165 (push_float -> empty .)
    MINUS           reduce using rule 165 (push_float -> empty .)
    ISEQUAL         reduce using rule 165 (push_float -> empty .)
    EQUAL           reduce using rule 165 (push_float -> empty .)
    NOTEQUAL        reduce using rule 165 (push_float -> empty .)
    GREATERTHAN     reduce using rule 165 (push_float -> empty .)
    GREATERORQUAL   reduce using rule 165 (push_float -> empty .)
    LESSTHAN        reduce using rule 165 (push_float -> empty .)
    LESSOREQUAL     reduce using rule 165 (push_float -> empty .)
    OR              reduce using rule 165 (push_float -> empty .)
    AND             reduce using rule 165 (push_float -> empty .)
    SEMICOL         reduce using rule 165 (push_float -> empty .)
    RPAR            reduce using rule 165 (push_float -> empty .)
    COMMA           reduce using rule 165 (push_float -> empty .)
    RBRACK          reduce using rule 165 (push_float -> empty .)
    LCURLY          reduce using rule 165 (push_float -> empty .)
    TO              reduce using rule 165 (push_float -> empty .)


state 197

    (117) factor_1 -> CTEB push_bool .

    TIMES           reduce using rule 117 (factor_1 -> CTEB push_bool .)
    DIV             reduce using rule 117 (factor_1 -> CTEB push_bool .)
    PLUS            reduce using rule 117 (factor_1 -> CTEB push_bool .)
    MINUS           reduce using rule 117 (factor_1 -> CTEB push_bool .)
    ISEQUAL         reduce using rule 117 (factor_1 -> CTEB push_bool .)
    EQUAL           reduce using rule 117 (factor_1 -> CTEB push_bool .)
    NOTEQUAL        reduce using rule 117 (factor_1 -> CTEB push_bool .)
    GREATERTHAN     reduce using rule 117 (factor_1 -> CTEB push_bool .)
    GREATERORQUAL   reduce using rule 117 (factor_1 -> CTEB push_bool .)
    LESSTHAN        reduce using rule 117 (factor_1 -> CTEB push_bool .)
    LESSOREQUAL     reduce using rule 117 (factor_1 -> CTEB push_bool .)
    OR              reduce using rule 117 (factor_1 -> CTEB push_bool .)
    AND             reduce using rule 117 (factor_1 -> CTEB push_bool .)
    SEMICOL         reduce using rule 117 (factor_1 -> CTEB push_bool .)
    RPAR            reduce using rule 117 (factor_1 -> CTEB push_bool .)
    COMMA           reduce using rule 117 (factor_1 -> CTEB push_bool .)
    RBRACK          reduce using rule 117 (factor_1 -> CTEB push_bool .)
    LCURLY          reduce using rule 117 (factor_1 -> CTEB push_bool .)
    TO              reduce using rule 117 (factor_1 -> CTEB push_bool .)


state 198

    (166) push_bool -> empty .

    TIMES           reduce using rule 166 (push_bool -> empty .)
    DIV             reduce using rule 166 (push_bool -> empty .)
    PLUS            reduce using rule 166 (push_bool -> empty .)
    MINUS           reduce using rule 166 (push_bool -> empty .)
    ISEQUAL         reduce using rule 166 (push_bool -> empty .)
    EQUAL           reduce using rule 166 (push_bool -> empty .)
    NOTEQUAL        reduce using rule 166 (push_bool -> empty .)
    GREATERTHAN     reduce using rule 166 (push_bool -> empty .)
    GREATERORQUAL   reduce using rule 166 (push_bool -> empty .)
    LESSTHAN        reduce using rule 166 (push_bool -> empty .)
    LESSOREQUAL     reduce using rule 166 (push_bool -> empty .)
    OR              reduce using rule 166 (push_bool -> empty .)
    AND             reduce using rule 166 (push_bool -> empty .)
    SEMICOL         reduce using rule 166 (push_bool -> empty .)
    RPAR            reduce using rule 166 (push_bool -> empty .)
    COMMA           reduce using rule 166 (push_bool -> empty .)
    RBRACK          reduce using rule 166 (push_bool -> empty .)
    LCURLY          reduce using rule 166 (push_bool -> empty .)
    TO              reduce using rule 166 (push_bool -> empty .)


state 199

    (118) factor_1 -> CTEC push_char .

    TIMES           reduce using rule 118 (factor_1 -> CTEC push_char .)
    DIV             reduce using rule 118 (factor_1 -> CTEC push_char .)
    PLUS            reduce using rule 118 (factor_1 -> CTEC push_char .)
    MINUS           reduce using rule 118 (factor_1 -> CTEC push_char .)
    ISEQUAL         reduce using rule 118 (factor_1 -> CTEC push_char .)
    EQUAL           reduce using rule 118 (factor_1 -> CTEC push_char .)
    NOTEQUAL        reduce using rule 118 (factor_1 -> CTEC push_char .)
    GREATERTHAN     reduce using rule 118 (factor_1 -> CTEC push_char .)
    GREATERORQUAL   reduce using rule 118 (factor_1 -> CTEC push_char .)
    LESSTHAN        reduce using rule 118 (factor_1 -> CTEC push_char .)
    LESSOREQUAL     reduce using rule 118 (factor_1 -> CTEC push_char .)
    OR              reduce using rule 118 (factor_1 -> CTEC push_char .)
    AND             reduce using rule 118 (factor_1 -> CTEC push_char .)
    SEMICOL         reduce using rule 118 (factor_1 -> CTEC push_char .)
    RPAR            reduce using rule 118 (factor_1 -> CTEC push_char .)
    COMMA           reduce using rule 118 (factor_1 -> CTEC push_char .)
    RBRACK          reduce using rule 118 (factor_1 -> CTEC push_char .)
    LCURLY          reduce using rule 118 (factor_1 -> CTEC push_char .)
    TO              reduce using rule 118 (factor_1 -> CTEC push_char .)


state 200

    (167) push_char -> empty .

    TIMES           reduce using rule 167 (push_char -> empty .)
    DIV             reduce using rule 167 (push_char -> empty .)
    PLUS            reduce using rule 167 (push_char -> empty .)
    MINUS           reduce using rule 167 (push_char -> empty .)
    ISEQUAL         reduce using rule 167 (push_char -> empty .)
    EQUAL           reduce using rule 167 (push_char -> empty .)
    NOTEQUAL        reduce using rule 167 (push_char -> empty .)
    GREATERTHAN     reduce using rule 167 (push_char -> empty .)
    GREATERORQUAL   reduce using rule 167 (push_char -> empty .)
    LESSTHAN        reduce using rule 167 (push_char -> empty .)
    LESSOREQUAL     reduce using rule 167 (push_char -> empty .)
    OR              reduce using rule 167 (push_char -> empty .)
    AND             reduce using rule 167 (push_char -> empty .)
    SEMICOL         reduce using rule 167 (push_char -> empty .)
    RPAR            reduce using rule 167 (push_char -> empty .)
    COMMA           reduce using rule 167 (push_char -> empty .)
    RBRACK          reduce using rule 167 (push_char -> empty .)
    LCURLY          reduce using rule 167 (push_char -> empty .)
    TO              reduce using rule 167 (push_char -> empty .)


state 201

    (119) factor_1 -> MINUS factor_1 .

    TIMES           reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    DIV             reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    PLUS            reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    MINUS           reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    ISEQUAL         reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    EQUAL           reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    NOTEQUAL        reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    GREATERTHAN     reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    GREATERORQUAL   reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    LESSTHAN        reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    LESSOREQUAL     reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    OR              reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    AND             reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    SEMICOL         reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    RPAR            reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    COMMA           reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    RBRACK          reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    LCURLY          reduce using rule 119 (factor_1 -> MINUS factor_1 .)
    TO              reduce using rule 119 (factor_1 -> MINUS factor_1 .)


state 202

    (126) factor_2 -> LPAR add_ff . expression RPAR pop_ff
    (86) expression -> . sexp check_and_or expression_1
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    expression                     shift and go to state 262
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 203

    (162) add_ff -> empty .

    ID              reduce using rule 162 (add_ff -> empty .)
    CTEI            reduce using rule 162 (add_ff -> empty .)
    CTEF            reduce using rule 162 (add_ff -> empty .)
    CTEB            reduce using rule 162 (add_ff -> empty .)
    CTEC            reduce using rule 162 (add_ff -> empty .)
    MINUS           reduce using rule 162 (add_ff -> empty .)
    LPAR            reduce using rule 162 (add_ff -> empty .)
    MEAN            reduce using rule 162 (add_ff -> empty .)
    MEDIAN          reduce using rule 162 (add_ff -> empty .)
    MODE            reduce using rule 162 (add_ff -> empty .)
    VARIANCE        reduce using rule 162 (add_ff -> empty .)
    SD              reduce using rule 162 (add_ff -> empty .)
    AVG             reduce using rule 162 (add_ff -> empty .)


state 204

    (131) mean -> MEAN LPAR . ID RPAR

    ID              shift and go to state 263


state 205

    (132) median -> MEDIAN LPAR . ID RPAR

    ID              shift and go to state 264


state 206

    (133) mode -> MODE LPAR . ID RPAR

    ID              shift and go to state 265


state 207

    (134) variance -> VARIANCE LPAR . ID RPAR

    ID              shift and go to state 266


state 208

    (135) standard_deviation -> SD LPAR . ID RPAR

    ID              shift and go to state 267


state 209

    (137) average -> AVG LPAR . ID RPAR

    ID              shift and go to state 268


state 210

    (57) cond -> IF LPAR expression RPAR . generate_g_if block cond_1 finish_if
    (172) generate_g_if -> . empty
    (190) empty -> .

    LCURLY          reduce using rule 190 (empty -> .)

    generate_g_if                  shift and go to state 269
    empty                          shift and go to state 270

state 211

    (63) cloop -> WHILE cloop_push_jump LPAR expression . generate_g_cloop_start RPAR block generate_g_cloop_end
    (178) generate_g_cloop_start -> . empty
    (190) empty -> .

    RPAR            reduce using rule 190 (empty -> .)

    generate_g_cloop_start         shift and go to state 271
    empty                          shift and go to state 272

state 212

    (64) nloop -> FROM ID see_id nloop_1 . push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e
    (169) push_id -> . empty
    (190) empty -> .

    TO              reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)

    push_id                        shift and go to state 273
    empty                          shift and go to state 274

state 213

    (65) nloop_1 -> dims .

    TO              reduce using rule 65 (nloop_1 -> dims .)
    EQUAL           reduce using rule 65 (nloop_1 -> dims .)


state 214

    (66) nloop_1 -> empty .

    TO              reduce using rule 66 (nloop_1 -> empty .)
    EQUAL           reduce using rule 66 (nloop_1 -> empty .)


state 215

    (74) read -> READ LPAR read_1 RPAR . SEMICOL

    SEMICOL         shift and go to state 275


state 216

    (75) read_1 -> ID see_id . read_2 push_id generate_g_read read_3
    (76) read_2 -> . dims reset_dims
    (77) read_2 -> . empty
    (42) dims -> . LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end
    (190) empty -> .

    LBRACK          shift and go to state 107
    COMMA           reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    read_2                         shift and go to state 276
    dims                           shift and go to state 277
    empty                          shift and go to state 278

state 217

    (80) write -> WRITE LPAR write_1 RPAR . SEMICOL

    SEMICOL         shift and go to state 279


state 218

    (81) write_1 -> write_2 generate_g_write . write_3
    (84) write_3 -> . COMMA write_1
    (85) write_3 -> . empty
    (190) empty -> .

    COMMA           shift and go to state 281
    RPAR            reduce using rule 190 (empty -> .)

    write_3                        shift and go to state 280
    empty                          shift and go to state 282

state 219

    (176) generate_g_write -> empty .

    COMMA           reduce using rule 176 (generate_g_write -> empty .)
    RPAR            reduce using rule 176 (generate_g_write -> empty .)


state 220

    (83) write_2 -> CTES push_string .

    COMMA           reduce using rule 83 (write_2 -> CTES push_string .)
    RPAR            reduce using rule 83 (write_2 -> CTES push_string .)


state 221

    (168) push_string -> empty .

    COMMA           reduce using rule 168 (push_string -> empty .)
    RPAR            reduce using rule 168 (push_string -> empty .)


state 222

    (56) histogram -> HIST LPAR ID COMMA . expression RPAR SEMICOL
    (86) expression -> . sexp check_and_or expression_1
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    expression                     shift and go to state 283
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 223

    (136) scale -> SCALE LPAR ID COMMA . ID RPAR

    ID              shift and go to state 284


state 224

    (33) params_1 -> type ID see_id params_2 see_end_param reset_dims params_3 .

    RPAR            reduce using rule 33 (params_1 -> type ID see_id params_2 see_end_param reset_dims params_3 .)


state 225

    (37) params_3 -> COMMA . params_1
    (33) params_1 -> . type ID see_id params_2 see_end_param reset_dims params_3
    (34) params_1 -> . empty
    (15) type -> . INT
    (16) type -> . FLOAT
    (17) type -> . CHAR
    (18) type -> . BOOL
    (190) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17
    RPAR            reduce using rule 190 (empty -> .)

    params_1                       shift and go to state 285
    type                           shift and go to state 62
    empty                          shift and go to state 63

state 226

    (38) params_3 -> empty .

    RPAR            reduce using rule 38 (params_3 -> empty .)


state 227

    (42) dims -> LBRACK see_dims expression generate_g_verify_f . dims_1 RBRACK dims_end
    (43) dims_1 -> . COMMA see_dims_s expression generate_g_verify_s
    (44) dims_1 -> . empty
    (190) empty -> .

    COMMA           shift and go to state 287
    RBRACK          reduce using rule 190 (empty -> .)

    dims_1                         shift and go to state 286
    empty                          shift and go to state 288

state 228

    (141) generate_g_verify_f -> empty .

    COMMA           reduce using rule 141 (generate_g_verify_f -> empty .)
    RBRACK          reduce using rule 141 (generate_g_verify_f -> empty .)


state 229

    (129) main -> MAIN see_id LPAR RPAR LCURLY see_func_start main_1 set_func_init fill_main_goto statement END SEMICOL RCURLY . generate_end
    (182) generate_end -> . empty
    (190) empty -> .

    $end            reduce using rule 190 (empty -> .)

    generate_end                   shift and go to state 289
    empty                          shift and go to state 290

state 230

    (39) assign -> ID see_id push_id assign_1 EQUAL . push_equal expression generate_assign SEMICOL
    (170) push_equal -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    CTEI            reduce using rule 190 (empty -> .)
    CTEF            reduce using rule 190 (empty -> .)
    CTEB            reduce using rule 190 (empty -> .)
    CTEC            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)
    MEAN            reduce using rule 190 (empty -> .)
    MEDIAN          reduce using rule 190 (empty -> .)
    MODE            reduce using rule 190 (empty -> .)
    VARIANCE        reduce using rule 190 (empty -> .)
    SD              reduce using rule 190 (empty -> .)
    AVG             reduce using rule 190 (empty -> .)

    push_equal                     shift and go to state 291
    empty                          shift and go to state 292

state 231

    (69) callfunc -> ID see_id verify_func LPAR activate_record . callfunc_1 verify_p_num RPAR
    (70) callfunc_1 -> . expression verify_params callfunc_3
    (71) callfunc_1 -> . empty
    (86) expression -> . sexp check_and_or expression_1
    (190) empty -> .
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    RPAR            reduce using rule 190 (empty -> .)
    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    callfunc_1                     shift and go to state 293
    expression                     shift and go to state 294
    empty                          shift and go to state 295
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 232

    (184) activate_record -> empty .

    ID              reduce using rule 184 (activate_record -> empty .)
    CTEI            reduce using rule 184 (activate_record -> empty .)
    CTEF            reduce using rule 184 (activate_record -> empty .)
    CTEB            reduce using rule 184 (activate_record -> empty .)
    CTEC            reduce using rule 184 (activate_record -> empty .)
    MINUS           reduce using rule 184 (activate_record -> empty .)
    LPAR            reduce using rule 184 (activate_record -> empty .)
    MEAN            reduce using rule 184 (activate_record -> empty .)
    MEDIAN          reduce using rule 184 (activate_record -> empty .)
    MODE            reduce using rule 184 (activate_record -> empty .)
    VARIANCE        reduce using rule 184 (activate_record -> empty .)
    SD              reduce using rule 184 (activate_record -> empty .)
    AVG             reduce using rule 184 (activate_record -> empty .)
    RPAR            reduce using rule 184 (activate_record -> empty .)


state 233

    (26) funcs -> FUNC rtype ID see_id see_func_start params LCURLY funcs_1 set_func_init statement funcs_2 see_func_end RCURLY funcs_3 .

    MAIN            reduce using rule 26 (funcs -> FUNC rtype ID see_id see_func_start params LCURLY funcs_1 set_func_init statement funcs_2 see_func_end RCURLY funcs_3 .)


state 234

    (30) funcs_3 -> funcs .

    MAIN            reduce using rule 30 (funcs_3 -> funcs .)


state 235

    (31) funcs_3 -> empty .

    MAIN            reduce using rule 31 (funcs_3 -> empty .)


state 236

    (86) expression -> sexp check_and_or expression_1 .

    SEMICOL         reduce using rule 86 (expression -> sexp check_and_or expression_1 .)
    RPAR            reduce using rule 86 (expression -> sexp check_and_or expression_1 .)
    COMMA           reduce using rule 86 (expression -> sexp check_and_or expression_1 .)
    RBRACK          reduce using rule 86 (expression -> sexp check_and_or expression_1 .)
    LCURLY          reduce using rule 86 (expression -> sexp check_and_or expression_1 .)
    TO              reduce using rule 86 (expression -> sexp check_and_or expression_1 .)


state 237

    (87) expression_1 -> expression_2 . push_and_or expression
    (155) push_and_or -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    CTEI            reduce using rule 190 (empty -> .)
    CTEF            reduce using rule 190 (empty -> .)
    CTEB            reduce using rule 190 (empty -> .)
    CTEC            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)
    MEAN            reduce using rule 190 (empty -> .)
    MEDIAN          reduce using rule 190 (empty -> .)
    MODE            reduce using rule 190 (empty -> .)
    VARIANCE        reduce using rule 190 (empty -> .)
    SD              reduce using rule 190 (empty -> .)
    AVG             reduce using rule 190 (empty -> .)

    push_and_or                    shift and go to state 296
    empty                          shift and go to state 297

state 238

    (88) expression_1 -> empty .

    SEMICOL         reduce using rule 88 (expression_1 -> empty .)
    RPAR            reduce using rule 88 (expression_1 -> empty .)
    COMMA           reduce using rule 88 (expression_1 -> empty .)
    RBRACK          reduce using rule 88 (expression_1 -> empty .)
    LCURLY          reduce using rule 88 (expression_1 -> empty .)
    TO              reduce using rule 88 (expression_1 -> empty .)


state 239

    (89) expression_2 -> OR .

    ID              reduce using rule 89 (expression_2 -> OR .)
    CTEI            reduce using rule 89 (expression_2 -> OR .)
    CTEF            reduce using rule 89 (expression_2 -> OR .)
    CTEB            reduce using rule 89 (expression_2 -> OR .)
    CTEC            reduce using rule 89 (expression_2 -> OR .)
    MINUS           reduce using rule 89 (expression_2 -> OR .)
    LPAR            reduce using rule 89 (expression_2 -> OR .)
    MEAN            reduce using rule 89 (expression_2 -> OR .)
    MEDIAN          reduce using rule 89 (expression_2 -> OR .)
    MODE            reduce using rule 89 (expression_2 -> OR .)
    VARIANCE        reduce using rule 89 (expression_2 -> OR .)
    SD              reduce using rule 89 (expression_2 -> OR .)
    AVG             reduce using rule 89 (expression_2 -> OR .)


state 240

    (90) expression_2 -> AND .

    ID              reduce using rule 90 (expression_2 -> AND .)
    CTEI            reduce using rule 90 (expression_2 -> AND .)
    CTEF            reduce using rule 90 (expression_2 -> AND .)
    CTEB            reduce using rule 90 (expression_2 -> AND .)
    CTEC            reduce using rule 90 (expression_2 -> AND .)
    MINUS           reduce using rule 90 (expression_2 -> AND .)
    LPAR            reduce using rule 90 (expression_2 -> AND .)
    MEAN            reduce using rule 90 (expression_2 -> AND .)
    MEDIAN          reduce using rule 90 (expression_2 -> AND .)
    MODE            reduce using rule 90 (expression_2 -> AND .)
    VARIANCE        reduce using rule 90 (expression_2 -> AND .)
    SD              reduce using rule 90 (expression_2 -> AND .)
    AVG             reduce using rule 90 (expression_2 -> AND .)


state 241

    (91) sexp -> exp check_relational sexp_1 .

    OR              reduce using rule 91 (sexp -> exp check_relational sexp_1 .)
    AND             reduce using rule 91 (sexp -> exp check_relational sexp_1 .)
    SEMICOL         reduce using rule 91 (sexp -> exp check_relational sexp_1 .)
    RPAR            reduce using rule 91 (sexp -> exp check_relational sexp_1 .)
    COMMA           reduce using rule 91 (sexp -> exp check_relational sexp_1 .)
    RBRACK          reduce using rule 91 (sexp -> exp check_relational sexp_1 .)
    LCURLY          reduce using rule 91 (sexp -> exp check_relational sexp_1 .)
    TO              reduce using rule 91 (sexp -> exp check_relational sexp_1 .)


state 242

    (92) sexp_1 -> sexp_2 . push_relational sexp
    (157) push_relational -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    CTEI            reduce using rule 190 (empty -> .)
    CTEF            reduce using rule 190 (empty -> .)
    CTEB            reduce using rule 190 (empty -> .)
    CTEC            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)
    MEAN            reduce using rule 190 (empty -> .)
    MEDIAN          reduce using rule 190 (empty -> .)
    MODE            reduce using rule 190 (empty -> .)
    VARIANCE        reduce using rule 190 (empty -> .)
    SD              reduce using rule 190 (empty -> .)
    AVG             reduce using rule 190 (empty -> .)

    push_relational                shift and go to state 298
    empty                          shift and go to state 299

state 243

    (93) sexp_1 -> empty .

    OR              reduce using rule 93 (sexp_1 -> empty .)
    AND             reduce using rule 93 (sexp_1 -> empty .)
    SEMICOL         reduce using rule 93 (sexp_1 -> empty .)
    RPAR            reduce using rule 93 (sexp_1 -> empty .)
    COMMA           reduce using rule 93 (sexp_1 -> empty .)
    RBRACK          reduce using rule 93 (sexp_1 -> empty .)
    LCURLY          reduce using rule 93 (sexp_1 -> empty .)
    TO              reduce using rule 93 (sexp_1 -> empty .)


state 244

    (94) sexp_2 -> ISEQUAL .

    ID              reduce using rule 94 (sexp_2 -> ISEQUAL .)
    CTEI            reduce using rule 94 (sexp_2 -> ISEQUAL .)
    CTEF            reduce using rule 94 (sexp_2 -> ISEQUAL .)
    CTEB            reduce using rule 94 (sexp_2 -> ISEQUAL .)
    CTEC            reduce using rule 94 (sexp_2 -> ISEQUAL .)
    MINUS           reduce using rule 94 (sexp_2 -> ISEQUAL .)
    LPAR            reduce using rule 94 (sexp_2 -> ISEQUAL .)
    MEAN            reduce using rule 94 (sexp_2 -> ISEQUAL .)
    MEDIAN          reduce using rule 94 (sexp_2 -> ISEQUAL .)
    MODE            reduce using rule 94 (sexp_2 -> ISEQUAL .)
    VARIANCE        reduce using rule 94 (sexp_2 -> ISEQUAL .)
    SD              reduce using rule 94 (sexp_2 -> ISEQUAL .)
    AVG             reduce using rule 94 (sexp_2 -> ISEQUAL .)


state 245

    (95) sexp_2 -> EQUAL .

    ID              reduce using rule 95 (sexp_2 -> EQUAL .)
    CTEI            reduce using rule 95 (sexp_2 -> EQUAL .)
    CTEF            reduce using rule 95 (sexp_2 -> EQUAL .)
    CTEB            reduce using rule 95 (sexp_2 -> EQUAL .)
    CTEC            reduce using rule 95 (sexp_2 -> EQUAL .)
    MINUS           reduce using rule 95 (sexp_2 -> EQUAL .)
    LPAR            reduce using rule 95 (sexp_2 -> EQUAL .)
    MEAN            reduce using rule 95 (sexp_2 -> EQUAL .)
    MEDIAN          reduce using rule 95 (sexp_2 -> EQUAL .)
    MODE            reduce using rule 95 (sexp_2 -> EQUAL .)
    VARIANCE        reduce using rule 95 (sexp_2 -> EQUAL .)
    SD              reduce using rule 95 (sexp_2 -> EQUAL .)
    AVG             reduce using rule 95 (sexp_2 -> EQUAL .)


state 246

    (96) sexp_2 -> NOTEQUAL .

    ID              reduce using rule 96 (sexp_2 -> NOTEQUAL .)
    CTEI            reduce using rule 96 (sexp_2 -> NOTEQUAL .)
    CTEF            reduce using rule 96 (sexp_2 -> NOTEQUAL .)
    CTEB            reduce using rule 96 (sexp_2 -> NOTEQUAL .)
    CTEC            reduce using rule 96 (sexp_2 -> NOTEQUAL .)
    MINUS           reduce using rule 96 (sexp_2 -> NOTEQUAL .)
    LPAR            reduce using rule 96 (sexp_2 -> NOTEQUAL .)
    MEAN            reduce using rule 96 (sexp_2 -> NOTEQUAL .)
    MEDIAN          reduce using rule 96 (sexp_2 -> NOTEQUAL .)
    MODE            reduce using rule 96 (sexp_2 -> NOTEQUAL .)
    VARIANCE        reduce using rule 96 (sexp_2 -> NOTEQUAL .)
    SD              reduce using rule 96 (sexp_2 -> NOTEQUAL .)
    AVG             reduce using rule 96 (sexp_2 -> NOTEQUAL .)


state 247

    (97) sexp_2 -> GREATERTHAN .

    ID              reduce using rule 97 (sexp_2 -> GREATERTHAN .)
    CTEI            reduce using rule 97 (sexp_2 -> GREATERTHAN .)
    CTEF            reduce using rule 97 (sexp_2 -> GREATERTHAN .)
    CTEB            reduce using rule 97 (sexp_2 -> GREATERTHAN .)
    CTEC            reduce using rule 97 (sexp_2 -> GREATERTHAN .)
    MINUS           reduce using rule 97 (sexp_2 -> GREATERTHAN .)
    LPAR            reduce using rule 97 (sexp_2 -> GREATERTHAN .)
    MEAN            reduce using rule 97 (sexp_2 -> GREATERTHAN .)
    MEDIAN          reduce using rule 97 (sexp_2 -> GREATERTHAN .)
    MODE            reduce using rule 97 (sexp_2 -> GREATERTHAN .)
    VARIANCE        reduce using rule 97 (sexp_2 -> GREATERTHAN .)
    SD              reduce using rule 97 (sexp_2 -> GREATERTHAN .)
    AVG             reduce using rule 97 (sexp_2 -> GREATERTHAN .)


state 248

    (98) sexp_2 -> GREATERORQUAL .

    ID              reduce using rule 98 (sexp_2 -> GREATERORQUAL .)
    CTEI            reduce using rule 98 (sexp_2 -> GREATERORQUAL .)
    CTEF            reduce using rule 98 (sexp_2 -> GREATERORQUAL .)
    CTEB            reduce using rule 98 (sexp_2 -> GREATERORQUAL .)
    CTEC            reduce using rule 98 (sexp_2 -> GREATERORQUAL .)
    MINUS           reduce using rule 98 (sexp_2 -> GREATERORQUAL .)
    LPAR            reduce using rule 98 (sexp_2 -> GREATERORQUAL .)
    MEAN            reduce using rule 98 (sexp_2 -> GREATERORQUAL .)
    MEDIAN          reduce using rule 98 (sexp_2 -> GREATERORQUAL .)
    MODE            reduce using rule 98 (sexp_2 -> GREATERORQUAL .)
    VARIANCE        reduce using rule 98 (sexp_2 -> GREATERORQUAL .)
    SD              reduce using rule 98 (sexp_2 -> GREATERORQUAL .)
    AVG             reduce using rule 98 (sexp_2 -> GREATERORQUAL .)


state 249

    (99) sexp_2 -> LESSTHAN .

    ID              reduce using rule 99 (sexp_2 -> LESSTHAN .)
    CTEI            reduce using rule 99 (sexp_2 -> LESSTHAN .)
    CTEF            reduce using rule 99 (sexp_2 -> LESSTHAN .)
    CTEB            reduce using rule 99 (sexp_2 -> LESSTHAN .)
    CTEC            reduce using rule 99 (sexp_2 -> LESSTHAN .)
    MINUS           reduce using rule 99 (sexp_2 -> LESSTHAN .)
    LPAR            reduce using rule 99 (sexp_2 -> LESSTHAN .)
    MEAN            reduce using rule 99 (sexp_2 -> LESSTHAN .)
    MEDIAN          reduce using rule 99 (sexp_2 -> LESSTHAN .)
    MODE            reduce using rule 99 (sexp_2 -> LESSTHAN .)
    VARIANCE        reduce using rule 99 (sexp_2 -> LESSTHAN .)
    SD              reduce using rule 99 (sexp_2 -> LESSTHAN .)
    AVG             reduce using rule 99 (sexp_2 -> LESSTHAN .)


state 250

    (100) sexp_2 -> LESSOREQUAL .

    ID              reduce using rule 100 (sexp_2 -> LESSOREQUAL .)
    CTEI            reduce using rule 100 (sexp_2 -> LESSOREQUAL .)
    CTEF            reduce using rule 100 (sexp_2 -> LESSOREQUAL .)
    CTEB            reduce using rule 100 (sexp_2 -> LESSOREQUAL .)
    CTEC            reduce using rule 100 (sexp_2 -> LESSOREQUAL .)
    MINUS           reduce using rule 100 (sexp_2 -> LESSOREQUAL .)
    LPAR            reduce using rule 100 (sexp_2 -> LESSOREQUAL .)
    MEAN            reduce using rule 100 (sexp_2 -> LESSOREQUAL .)
    MEDIAN          reduce using rule 100 (sexp_2 -> LESSOREQUAL .)
    MODE            reduce using rule 100 (sexp_2 -> LESSOREQUAL .)
    VARIANCE        reduce using rule 100 (sexp_2 -> LESSOREQUAL .)
    SD              reduce using rule 100 (sexp_2 -> LESSOREQUAL .)
    AVG             reduce using rule 100 (sexp_2 -> LESSOREQUAL .)


state 251

    (101) exp -> term check_sum exp_1 .

    ISEQUAL         reduce using rule 101 (exp -> term check_sum exp_1 .)
    EQUAL           reduce using rule 101 (exp -> term check_sum exp_1 .)
    NOTEQUAL        reduce using rule 101 (exp -> term check_sum exp_1 .)
    GREATERTHAN     reduce using rule 101 (exp -> term check_sum exp_1 .)
    GREATERORQUAL   reduce using rule 101 (exp -> term check_sum exp_1 .)
    LESSTHAN        reduce using rule 101 (exp -> term check_sum exp_1 .)
    LESSOREQUAL     reduce using rule 101 (exp -> term check_sum exp_1 .)
    OR              reduce using rule 101 (exp -> term check_sum exp_1 .)
    AND             reduce using rule 101 (exp -> term check_sum exp_1 .)
    SEMICOL         reduce using rule 101 (exp -> term check_sum exp_1 .)
    RPAR            reduce using rule 101 (exp -> term check_sum exp_1 .)
    COMMA           reduce using rule 101 (exp -> term check_sum exp_1 .)
    RBRACK          reduce using rule 101 (exp -> term check_sum exp_1 .)
    LCURLY          reduce using rule 101 (exp -> term check_sum exp_1 .)
    TO              reduce using rule 101 (exp -> term check_sum exp_1 .)


state 252

    (102) exp_1 -> exp_2 . push_sum exp
    (159) push_sum -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    CTEI            reduce using rule 190 (empty -> .)
    CTEF            reduce using rule 190 (empty -> .)
    CTEB            reduce using rule 190 (empty -> .)
    CTEC            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)
    MEAN            reduce using rule 190 (empty -> .)
    MEDIAN          reduce using rule 190 (empty -> .)
    MODE            reduce using rule 190 (empty -> .)
    VARIANCE        reduce using rule 190 (empty -> .)
    SD              reduce using rule 190 (empty -> .)
    AVG             reduce using rule 190 (empty -> .)

    push_sum                       shift and go to state 300
    empty                          shift and go to state 301

state 253

    (103) exp_1 -> empty .

    ISEQUAL         reduce using rule 103 (exp_1 -> empty .)
    EQUAL           reduce using rule 103 (exp_1 -> empty .)
    NOTEQUAL        reduce using rule 103 (exp_1 -> empty .)
    GREATERTHAN     reduce using rule 103 (exp_1 -> empty .)
    GREATERORQUAL   reduce using rule 103 (exp_1 -> empty .)
    LESSTHAN        reduce using rule 103 (exp_1 -> empty .)
    LESSOREQUAL     reduce using rule 103 (exp_1 -> empty .)
    OR              reduce using rule 103 (exp_1 -> empty .)
    AND             reduce using rule 103 (exp_1 -> empty .)
    SEMICOL         reduce using rule 103 (exp_1 -> empty .)
    RPAR            reduce using rule 103 (exp_1 -> empty .)
    COMMA           reduce using rule 103 (exp_1 -> empty .)
    RBRACK          reduce using rule 103 (exp_1 -> empty .)
    LCURLY          reduce using rule 103 (exp_1 -> empty .)
    TO              reduce using rule 103 (exp_1 -> empty .)


state 254

    (104) exp_2 -> PLUS .

    ID              reduce using rule 104 (exp_2 -> PLUS .)
    CTEI            reduce using rule 104 (exp_2 -> PLUS .)
    CTEF            reduce using rule 104 (exp_2 -> PLUS .)
    CTEB            reduce using rule 104 (exp_2 -> PLUS .)
    CTEC            reduce using rule 104 (exp_2 -> PLUS .)
    MINUS           reduce using rule 104 (exp_2 -> PLUS .)
    LPAR            reduce using rule 104 (exp_2 -> PLUS .)
    MEAN            reduce using rule 104 (exp_2 -> PLUS .)
    MEDIAN          reduce using rule 104 (exp_2 -> PLUS .)
    MODE            reduce using rule 104 (exp_2 -> PLUS .)
    VARIANCE        reduce using rule 104 (exp_2 -> PLUS .)
    SD              reduce using rule 104 (exp_2 -> PLUS .)
    AVG             reduce using rule 104 (exp_2 -> PLUS .)


state 255

    (105) exp_2 -> MINUS .

    ID              reduce using rule 105 (exp_2 -> MINUS .)
    CTEI            reduce using rule 105 (exp_2 -> MINUS .)
    CTEF            reduce using rule 105 (exp_2 -> MINUS .)
    CTEB            reduce using rule 105 (exp_2 -> MINUS .)
    CTEC            reduce using rule 105 (exp_2 -> MINUS .)
    MINUS           reduce using rule 105 (exp_2 -> MINUS .)
    LPAR            reduce using rule 105 (exp_2 -> MINUS .)
    MEAN            reduce using rule 105 (exp_2 -> MINUS .)
    MEDIAN          reduce using rule 105 (exp_2 -> MINUS .)
    MODE            reduce using rule 105 (exp_2 -> MINUS .)
    VARIANCE        reduce using rule 105 (exp_2 -> MINUS .)
    SD              reduce using rule 105 (exp_2 -> MINUS .)
    AVG             reduce using rule 105 (exp_2 -> MINUS .)


state 256

    (106) term -> factor check_mul_div term_1 .

    PLUS            reduce using rule 106 (term -> factor check_mul_div term_1 .)
    MINUS           reduce using rule 106 (term -> factor check_mul_div term_1 .)
    ISEQUAL         reduce using rule 106 (term -> factor check_mul_div term_1 .)
    EQUAL           reduce using rule 106 (term -> factor check_mul_div term_1 .)
    NOTEQUAL        reduce using rule 106 (term -> factor check_mul_div term_1 .)
    GREATERTHAN     reduce using rule 106 (term -> factor check_mul_div term_1 .)
    GREATERORQUAL   reduce using rule 106 (term -> factor check_mul_div term_1 .)
    LESSTHAN        reduce using rule 106 (term -> factor check_mul_div term_1 .)
    LESSOREQUAL     reduce using rule 106 (term -> factor check_mul_div term_1 .)
    OR              reduce using rule 106 (term -> factor check_mul_div term_1 .)
    AND             reduce using rule 106 (term -> factor check_mul_div term_1 .)
    SEMICOL         reduce using rule 106 (term -> factor check_mul_div term_1 .)
    RPAR            reduce using rule 106 (term -> factor check_mul_div term_1 .)
    COMMA           reduce using rule 106 (term -> factor check_mul_div term_1 .)
    RBRACK          reduce using rule 106 (term -> factor check_mul_div term_1 .)
    LCURLY          reduce using rule 106 (term -> factor check_mul_div term_1 .)
    TO              reduce using rule 106 (term -> factor check_mul_div term_1 .)


state 257

    (107) term_1 -> term_2 . push_mul_div term
    (161) push_mul_div -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    CTEI            reduce using rule 190 (empty -> .)
    CTEF            reduce using rule 190 (empty -> .)
    CTEB            reduce using rule 190 (empty -> .)
    CTEC            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)
    MEAN            reduce using rule 190 (empty -> .)
    MEDIAN          reduce using rule 190 (empty -> .)
    MODE            reduce using rule 190 (empty -> .)
    VARIANCE        reduce using rule 190 (empty -> .)
    SD              reduce using rule 190 (empty -> .)
    AVG             reduce using rule 190 (empty -> .)

    push_mul_div                   shift and go to state 302
    empty                          shift and go to state 303

state 258

    (108) term_1 -> empty .

    PLUS            reduce using rule 108 (term_1 -> empty .)
    MINUS           reduce using rule 108 (term_1 -> empty .)
    ISEQUAL         reduce using rule 108 (term_1 -> empty .)
    EQUAL           reduce using rule 108 (term_1 -> empty .)
    NOTEQUAL        reduce using rule 108 (term_1 -> empty .)
    GREATERTHAN     reduce using rule 108 (term_1 -> empty .)
    GREATERORQUAL   reduce using rule 108 (term_1 -> empty .)
    LESSTHAN        reduce using rule 108 (term_1 -> empty .)
    LESSOREQUAL     reduce using rule 108 (term_1 -> empty .)
    OR              reduce using rule 108 (term_1 -> empty .)
    AND             reduce using rule 108 (term_1 -> empty .)
    SEMICOL         reduce using rule 108 (term_1 -> empty .)
    RPAR            reduce using rule 108 (term_1 -> empty .)
    COMMA           reduce using rule 108 (term_1 -> empty .)
    RBRACK          reduce using rule 108 (term_1 -> empty .)
    LCURLY          reduce using rule 108 (term_1 -> empty .)
    TO              reduce using rule 108 (term_1 -> empty .)


state 259

    (109) term_2 -> TIMES .

    ID              reduce using rule 109 (term_2 -> TIMES .)
    CTEI            reduce using rule 109 (term_2 -> TIMES .)
    CTEF            reduce using rule 109 (term_2 -> TIMES .)
    CTEB            reduce using rule 109 (term_2 -> TIMES .)
    CTEC            reduce using rule 109 (term_2 -> TIMES .)
    MINUS           reduce using rule 109 (term_2 -> TIMES .)
    LPAR            reduce using rule 109 (term_2 -> TIMES .)
    MEAN            reduce using rule 109 (term_2 -> TIMES .)
    MEDIAN          reduce using rule 109 (term_2 -> TIMES .)
    MODE            reduce using rule 109 (term_2 -> TIMES .)
    VARIANCE        reduce using rule 109 (term_2 -> TIMES .)
    SD              reduce using rule 109 (term_2 -> TIMES .)
    AVG             reduce using rule 109 (term_2 -> TIMES .)


state 260

    (110) term_2 -> DIV .

    ID              reduce using rule 110 (term_2 -> DIV .)
    CTEI            reduce using rule 110 (term_2 -> DIV .)
    CTEF            reduce using rule 110 (term_2 -> DIV .)
    CTEB            reduce using rule 110 (term_2 -> DIV .)
    CTEC            reduce using rule 110 (term_2 -> DIV .)
    MINUS           reduce using rule 110 (term_2 -> DIV .)
    LPAR            reduce using rule 110 (term_2 -> DIV .)
    MEAN            reduce using rule 110 (term_2 -> DIV .)
    MEDIAN          reduce using rule 110 (term_2 -> DIV .)
    MODE            reduce using rule 110 (term_2 -> DIV .)
    VARIANCE        reduce using rule 110 (term_2 -> DIV .)
    SD              reduce using rule 110 (term_2 -> DIV .)
    AVG             reduce using rule 110 (term_2 -> DIV .)


state 261

    (113) factor_1 -> ID see_id push_id . factor_3 print_value reset_dims
    (127) factor_3 -> . dims
    (128) factor_3 -> . empty
    (42) dims -> . LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end
    (190) empty -> .

    LBRACK          shift and go to state 107
    TIMES           reduce using rule 190 (empty -> .)
    DIV             reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    factor_3                       shift and go to state 304
    dims                           shift and go to state 305
    empty                          shift and go to state 306

state 262

    (126) factor_2 -> LPAR add_ff expression . RPAR pop_ff

    RPAR            shift and go to state 307


state 263

    (131) mean -> MEAN LPAR ID . RPAR

    RPAR            shift and go to state 308


state 264

    (132) median -> MEDIAN LPAR ID . RPAR

    RPAR            shift and go to state 309


state 265

    (133) mode -> MODE LPAR ID . RPAR

    RPAR            shift and go to state 310


state 266

    (134) variance -> VARIANCE LPAR ID . RPAR

    RPAR            shift and go to state 311


state 267

    (135) standard_deviation -> SD LPAR ID . RPAR

    RPAR            shift and go to state 312


state 268

    (137) average -> AVG LPAR ID . RPAR

    RPAR            shift and go to state 313


state 269

    (57) cond -> IF LPAR expression RPAR generate_g_if . block cond_1 finish_if
    (24) block -> . LCURLY block_1 RCURLY

    LCURLY          shift and go to state 315

    block                          shift and go to state 314

state 270

    (172) generate_g_if -> empty .

    LCURLY          reduce using rule 172 (generate_g_if -> empty .)


state 271

    (63) cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start . RPAR block generate_g_cloop_end

    RPAR            shift and go to state 316


state 272

    (178) generate_g_cloop_start -> empty .

    RPAR            reduce using rule 178 (generate_g_cloop_start -> empty .)


state 273

    (64) nloop -> FROM ID see_id nloop_1 push_id . nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e
    (67) nloop_2 -> . push_id EQUAL push_equal expression generate_assign
    (68) nloop_2 -> . empty
    (169) push_id -> . empty
    (190) empty -> .

    TO              reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)

    push_id                        shift and go to state 317
    nloop_2                        shift and go to state 318
    empty                          shift and go to state 319

state 274

    (169) push_id -> empty .

    TO              reduce using rule 169 (push_id -> empty .)
    EQUAL           reduce using rule 169 (push_id -> empty .)
    COMMA           reduce using rule 169 (push_id -> empty .)
    RPAR            reduce using rule 169 (push_id -> empty .)


state 275

    (74) read -> READ LPAR read_1 RPAR SEMICOL .

    ID              reduce using rule 74 (read -> READ LPAR read_1 RPAR SEMICOL .)
    IF              reduce using rule 74 (read -> READ LPAR read_1 RPAR SEMICOL .)
    WHILE           reduce using rule 74 (read -> READ LPAR read_1 RPAR SEMICOL .)
    FROM            reduce using rule 74 (read -> READ LPAR read_1 RPAR SEMICOL .)
    READ            reduce using rule 74 (read -> READ LPAR read_1 RPAR SEMICOL .)
    WRITE           reduce using rule 74 (read -> READ LPAR read_1 RPAR SEMICOL .)
    HIST            reduce using rule 74 (read -> READ LPAR read_1 RPAR SEMICOL .)
    SCALE           reduce using rule 74 (read -> READ LPAR read_1 RPAR SEMICOL .)
    RETURN          reduce using rule 74 (read -> READ LPAR read_1 RPAR SEMICOL .)
    RCURLY          reduce using rule 74 (read -> READ LPAR read_1 RPAR SEMICOL .)
    END             reduce using rule 74 (read -> READ LPAR read_1 RPAR SEMICOL .)


state 276

    (75) read_1 -> ID see_id read_2 . push_id generate_g_read read_3
    (169) push_id -> . empty
    (190) empty -> .

    COMMA           reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    push_id                        shift and go to state 320
    empty                          shift and go to state 274

state 277

    (76) read_2 -> dims . reset_dims
    (152) reset_dims -> . empty
    (190) empty -> .

    COMMA           reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    reset_dims                     shift and go to state 321
    empty                          shift and go to state 175

state 278

    (77) read_2 -> empty .

    COMMA           reduce using rule 77 (read_2 -> empty .)
    RPAR            reduce using rule 77 (read_2 -> empty .)


state 279

    (80) write -> WRITE LPAR write_1 RPAR SEMICOL .

    ID              reduce using rule 80 (write -> WRITE LPAR write_1 RPAR SEMICOL .)
    IF              reduce using rule 80 (write -> WRITE LPAR write_1 RPAR SEMICOL .)
    WHILE           reduce using rule 80 (write -> WRITE LPAR write_1 RPAR SEMICOL .)
    FROM            reduce using rule 80 (write -> WRITE LPAR write_1 RPAR SEMICOL .)
    READ            reduce using rule 80 (write -> WRITE LPAR write_1 RPAR SEMICOL .)
    WRITE           reduce using rule 80 (write -> WRITE LPAR write_1 RPAR SEMICOL .)
    HIST            reduce using rule 80 (write -> WRITE LPAR write_1 RPAR SEMICOL .)
    SCALE           reduce using rule 80 (write -> WRITE LPAR write_1 RPAR SEMICOL .)
    RETURN          reduce using rule 80 (write -> WRITE LPAR write_1 RPAR SEMICOL .)
    RCURLY          reduce using rule 80 (write -> WRITE LPAR write_1 RPAR SEMICOL .)
    END             reduce using rule 80 (write -> WRITE LPAR write_1 RPAR SEMICOL .)


state 280

    (81) write_1 -> write_2 generate_g_write write_3 .

    RPAR            reduce using rule 81 (write_1 -> write_2 generate_g_write write_3 .)


state 281

    (84) write_3 -> COMMA . write_1
    (81) write_1 -> . write_2 generate_g_write write_3
    (82) write_2 -> . expression
    (83) write_2 -> . CTES push_string
    (86) expression -> . sexp check_and_or expression_1
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    CTES            shift and go to state 171
    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    write_1                        shift and go to state 322
    write_2                        shift and go to state 169
    expression                     shift and go to state 170
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 282

    (85) write_3 -> empty .

    RPAR            reduce using rule 85 (write_3 -> empty .)


state 283

    (56) histogram -> HIST LPAR ID COMMA expression . RPAR SEMICOL

    RPAR            shift and go to state 323


state 284

    (136) scale -> SCALE LPAR ID COMMA ID . RPAR

    RPAR            shift and go to state 324


state 285

    (37) params_3 -> COMMA params_1 .

    RPAR            reduce using rule 37 (params_3 -> COMMA params_1 .)


state 286

    (42) dims -> LBRACK see_dims expression generate_g_verify_f dims_1 . RBRACK dims_end

    RBRACK          shift and go to state 325


state 287

    (43) dims_1 -> COMMA . see_dims_s expression generate_g_verify_s
    (140) see_dims_s -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    CTEI            reduce using rule 190 (empty -> .)
    CTEF            reduce using rule 190 (empty -> .)
    CTEB            reduce using rule 190 (empty -> .)
    CTEC            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)
    MEAN            reduce using rule 190 (empty -> .)
    MEDIAN          reduce using rule 190 (empty -> .)
    MODE            reduce using rule 190 (empty -> .)
    VARIANCE        reduce using rule 190 (empty -> .)
    SD              reduce using rule 190 (empty -> .)
    AVG             reduce using rule 190 (empty -> .)

    see_dims_s                     shift and go to state 326
    empty                          shift and go to state 327

state 288

    (44) dims_1 -> empty .

    RBRACK          reduce using rule 44 (dims_1 -> empty .)


state 289

    (129) main -> MAIN see_id LPAR RPAR LCURLY see_func_start main_1 set_func_init fill_main_goto statement END SEMICOL RCURLY generate_end .

    $end            reduce using rule 129 (main -> MAIN see_id LPAR RPAR LCURLY see_func_start main_1 set_func_init fill_main_goto statement END SEMICOL RCURLY generate_end .)


state 290

    (182) generate_end -> empty .

    $end            reduce using rule 182 (generate_end -> empty .)


state 291

    (39) assign -> ID see_id push_id assign_1 EQUAL push_equal . expression generate_assign SEMICOL
    (86) expression -> . sexp check_and_or expression_1
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    expression                     shift and go to state 328
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 292

    (170) push_equal -> empty .

    ID              reduce using rule 170 (push_equal -> empty .)
    CTEI            reduce using rule 170 (push_equal -> empty .)
    CTEF            reduce using rule 170 (push_equal -> empty .)
    CTEB            reduce using rule 170 (push_equal -> empty .)
    CTEC            reduce using rule 170 (push_equal -> empty .)
    MINUS           reduce using rule 170 (push_equal -> empty .)
    LPAR            reduce using rule 170 (push_equal -> empty .)
    MEAN            reduce using rule 170 (push_equal -> empty .)
    MEDIAN          reduce using rule 170 (push_equal -> empty .)
    MODE            reduce using rule 170 (push_equal -> empty .)
    VARIANCE        reduce using rule 170 (push_equal -> empty .)
    SD              reduce using rule 170 (push_equal -> empty .)
    AVG             reduce using rule 170 (push_equal -> empty .)


state 293

    (69) callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 . verify_p_num RPAR
    (187) verify_p_num -> . empty
    (190) empty -> .

    RPAR            reduce using rule 190 (empty -> .)

    verify_p_num                   shift and go to state 329
    empty                          shift and go to state 330

state 294

    (70) callfunc_1 -> expression . verify_params callfunc_3
    (185) verify_params -> . empty
    (190) empty -> .

    COMMA           reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    verify_params                  shift and go to state 331
    empty                          shift and go to state 332

state 295

    (71) callfunc_1 -> empty .

    RPAR            reduce using rule 71 (callfunc_1 -> empty .)


state 296

    (87) expression_1 -> expression_2 push_and_or . expression
    (86) expression -> . sexp check_and_or expression_1
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    expression                     shift and go to state 333
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 297

    (155) push_and_or -> empty .

    ID              reduce using rule 155 (push_and_or -> empty .)
    CTEI            reduce using rule 155 (push_and_or -> empty .)
    CTEF            reduce using rule 155 (push_and_or -> empty .)
    CTEB            reduce using rule 155 (push_and_or -> empty .)
    CTEC            reduce using rule 155 (push_and_or -> empty .)
    MINUS           reduce using rule 155 (push_and_or -> empty .)
    LPAR            reduce using rule 155 (push_and_or -> empty .)
    MEAN            reduce using rule 155 (push_and_or -> empty .)
    MEDIAN          reduce using rule 155 (push_and_or -> empty .)
    MODE            reduce using rule 155 (push_and_or -> empty .)
    VARIANCE        reduce using rule 155 (push_and_or -> empty .)
    SD              reduce using rule 155 (push_and_or -> empty .)
    AVG             reduce using rule 155 (push_and_or -> empty .)


state 298

    (92) sexp_1 -> sexp_2 push_relational . sexp
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    sexp                           shift and go to state 334
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 299

    (157) push_relational -> empty .

    ID              reduce using rule 157 (push_relational -> empty .)
    CTEI            reduce using rule 157 (push_relational -> empty .)
    CTEF            reduce using rule 157 (push_relational -> empty .)
    CTEB            reduce using rule 157 (push_relational -> empty .)
    CTEC            reduce using rule 157 (push_relational -> empty .)
    MINUS           reduce using rule 157 (push_relational -> empty .)
    LPAR            reduce using rule 157 (push_relational -> empty .)
    MEAN            reduce using rule 157 (push_relational -> empty .)
    MEDIAN          reduce using rule 157 (push_relational -> empty .)
    MODE            reduce using rule 157 (push_relational -> empty .)
    VARIANCE        reduce using rule 157 (push_relational -> empty .)
    SD              reduce using rule 157 (push_relational -> empty .)
    AVG             reduce using rule 157 (push_relational -> empty .)


state 300

    (102) exp_1 -> exp_2 push_sum . exp
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    exp                            shift and go to state 335
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 301

    (159) push_sum -> empty .

    ID              reduce using rule 159 (push_sum -> empty .)
    CTEI            reduce using rule 159 (push_sum -> empty .)
    CTEF            reduce using rule 159 (push_sum -> empty .)
    CTEB            reduce using rule 159 (push_sum -> empty .)
    CTEC            reduce using rule 159 (push_sum -> empty .)
    MINUS           reduce using rule 159 (push_sum -> empty .)
    LPAR            reduce using rule 159 (push_sum -> empty .)
    MEAN            reduce using rule 159 (push_sum -> empty .)
    MEDIAN          reduce using rule 159 (push_sum -> empty .)
    MODE            reduce using rule 159 (push_sum -> empty .)
    VARIANCE        reduce using rule 159 (push_sum -> empty .)
    SD              reduce using rule 159 (push_sum -> empty .)
    AVG             reduce using rule 159 (push_sum -> empty .)


state 302

    (107) term_1 -> term_2 push_mul_div . term
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    term                           shift and go to state 336
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 303

    (161) push_mul_div -> empty .

    ID              reduce using rule 161 (push_mul_div -> empty .)
    CTEI            reduce using rule 161 (push_mul_div -> empty .)
    CTEF            reduce using rule 161 (push_mul_div -> empty .)
    CTEB            reduce using rule 161 (push_mul_div -> empty .)
    CTEC            reduce using rule 161 (push_mul_div -> empty .)
    MINUS           reduce using rule 161 (push_mul_div -> empty .)
    LPAR            reduce using rule 161 (push_mul_div -> empty .)
    MEAN            reduce using rule 161 (push_mul_div -> empty .)
    MEDIAN          reduce using rule 161 (push_mul_div -> empty .)
    MODE            reduce using rule 161 (push_mul_div -> empty .)
    VARIANCE        reduce using rule 161 (push_mul_div -> empty .)
    SD              reduce using rule 161 (push_mul_div -> empty .)
    AVG             reduce using rule 161 (push_mul_div -> empty .)


state 304

    (113) factor_1 -> ID see_id push_id factor_3 . print_value reset_dims
    (153) print_value -> . empty
    (190) empty -> .

    TIMES           reduce using rule 190 (empty -> .)
    DIV             reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    print_value                    shift and go to state 337
    empty                          shift and go to state 338

state 305

    (127) factor_3 -> dims .

    TIMES           reduce using rule 127 (factor_3 -> dims .)
    DIV             reduce using rule 127 (factor_3 -> dims .)
    PLUS            reduce using rule 127 (factor_3 -> dims .)
    MINUS           reduce using rule 127 (factor_3 -> dims .)
    ISEQUAL         reduce using rule 127 (factor_3 -> dims .)
    EQUAL           reduce using rule 127 (factor_3 -> dims .)
    NOTEQUAL        reduce using rule 127 (factor_3 -> dims .)
    GREATERTHAN     reduce using rule 127 (factor_3 -> dims .)
    GREATERORQUAL   reduce using rule 127 (factor_3 -> dims .)
    LESSTHAN        reduce using rule 127 (factor_3 -> dims .)
    LESSOREQUAL     reduce using rule 127 (factor_3 -> dims .)
    OR              reduce using rule 127 (factor_3 -> dims .)
    AND             reduce using rule 127 (factor_3 -> dims .)
    SEMICOL         reduce using rule 127 (factor_3 -> dims .)
    RPAR            reduce using rule 127 (factor_3 -> dims .)
    COMMA           reduce using rule 127 (factor_3 -> dims .)
    RBRACK          reduce using rule 127 (factor_3 -> dims .)
    LCURLY          reduce using rule 127 (factor_3 -> dims .)
    TO              reduce using rule 127 (factor_3 -> dims .)


state 306

    (128) factor_3 -> empty .

    TIMES           reduce using rule 128 (factor_3 -> empty .)
    DIV             reduce using rule 128 (factor_3 -> empty .)
    PLUS            reduce using rule 128 (factor_3 -> empty .)
    MINUS           reduce using rule 128 (factor_3 -> empty .)
    ISEQUAL         reduce using rule 128 (factor_3 -> empty .)
    EQUAL           reduce using rule 128 (factor_3 -> empty .)
    NOTEQUAL        reduce using rule 128 (factor_3 -> empty .)
    GREATERTHAN     reduce using rule 128 (factor_3 -> empty .)
    GREATERORQUAL   reduce using rule 128 (factor_3 -> empty .)
    LESSTHAN        reduce using rule 128 (factor_3 -> empty .)
    LESSOREQUAL     reduce using rule 128 (factor_3 -> empty .)
    OR              reduce using rule 128 (factor_3 -> empty .)
    AND             reduce using rule 128 (factor_3 -> empty .)
    SEMICOL         reduce using rule 128 (factor_3 -> empty .)
    RPAR            reduce using rule 128 (factor_3 -> empty .)
    COMMA           reduce using rule 128 (factor_3 -> empty .)
    RBRACK          reduce using rule 128 (factor_3 -> empty .)
    LCURLY          reduce using rule 128 (factor_3 -> empty .)
    TO              reduce using rule 128 (factor_3 -> empty .)


state 307

    (126) factor_2 -> LPAR add_ff expression RPAR . pop_ff
    (163) pop_ff -> . empty
    (190) empty -> .

    TIMES           reduce using rule 190 (empty -> .)
    DIV             reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    pop_ff                         shift and go to state 339
    empty                          shift and go to state 340

state 308

    (131) mean -> MEAN LPAR ID RPAR .

    TIMES           reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    DIV             reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    PLUS            reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    MINUS           reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    ISEQUAL         reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    EQUAL           reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    NOTEQUAL        reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    GREATERTHAN     reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    GREATERORQUAL   reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    LESSTHAN        reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    LESSOREQUAL     reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    OR              reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    AND             reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    SEMICOL         reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    RPAR            reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    COMMA           reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    RBRACK          reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    LCURLY          reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)
    TO              reduce using rule 131 (mean -> MEAN LPAR ID RPAR .)


state 309

    (132) median -> MEDIAN LPAR ID RPAR .

    TIMES           reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    DIV             reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    PLUS            reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    MINUS           reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    ISEQUAL         reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    EQUAL           reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    NOTEQUAL        reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    GREATERTHAN     reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    GREATERORQUAL   reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    LESSTHAN        reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    LESSOREQUAL     reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    OR              reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    AND             reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    SEMICOL         reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    RPAR            reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    COMMA           reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    RBRACK          reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    LCURLY          reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)
    TO              reduce using rule 132 (median -> MEDIAN LPAR ID RPAR .)


state 310

    (133) mode -> MODE LPAR ID RPAR .

    TIMES           reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    DIV             reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    PLUS            reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    MINUS           reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    ISEQUAL         reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    EQUAL           reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    NOTEQUAL        reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    GREATERTHAN     reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    GREATERORQUAL   reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    LESSTHAN        reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    LESSOREQUAL     reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    OR              reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    AND             reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    SEMICOL         reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    RPAR            reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    COMMA           reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    RBRACK          reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    LCURLY          reduce using rule 133 (mode -> MODE LPAR ID RPAR .)
    TO              reduce using rule 133 (mode -> MODE LPAR ID RPAR .)


state 311

    (134) variance -> VARIANCE LPAR ID RPAR .

    TIMES           reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    DIV             reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    PLUS            reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    MINUS           reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    ISEQUAL         reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    EQUAL           reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    NOTEQUAL        reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    GREATERTHAN     reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    GREATERORQUAL   reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    LESSTHAN        reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    LESSOREQUAL     reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    OR              reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    AND             reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    SEMICOL         reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    RPAR            reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    COMMA           reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    RBRACK          reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    LCURLY          reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)
    TO              reduce using rule 134 (variance -> VARIANCE LPAR ID RPAR .)


state 312

    (135) standard_deviation -> SD LPAR ID RPAR .

    TIMES           reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    DIV             reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    PLUS            reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    MINUS           reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    ISEQUAL         reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    EQUAL           reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    NOTEQUAL        reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    GREATERTHAN     reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    GREATERORQUAL   reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    LESSTHAN        reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    LESSOREQUAL     reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    OR              reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    AND             reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    SEMICOL         reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    RPAR            reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    COMMA           reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    RBRACK          reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    LCURLY          reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)
    TO              reduce using rule 135 (standard_deviation -> SD LPAR ID RPAR .)


state 313

    (137) average -> AVG LPAR ID RPAR .

    TIMES           reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    DIV             reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    PLUS            reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    MINUS           reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    ISEQUAL         reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    EQUAL           reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    NOTEQUAL        reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    GREATERTHAN     reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    GREATERORQUAL   reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    LESSTHAN        reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    LESSOREQUAL     reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    OR              reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    AND             reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    SEMICOL         reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    RPAR            reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    COMMA           reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    RBRACK          reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    LCURLY          reduce using rule 137 (average -> AVG LPAR ID RPAR .)
    TO              reduce using rule 137 (average -> AVG LPAR ID RPAR .)


state 314

    (57) cond -> IF LPAR expression RPAR generate_g_if block . cond_1 finish_if
    (58) cond_1 -> . ELSE generate_g_else cond_2

    ELSE            shift and go to state 342

    cond_1                         shift and go to state 341

state 315

    (24) block -> LCURLY . block_1 RCURLY
    (25) block_1 -> . statement
    (45) statement -> . statement_1 statement
    (46) statement -> . empty
    (47) statement_1 -> . assign
    (48) statement_1 -> . cond
    (49) statement_1 -> . cloop
    (50) statement_1 -> . nloop
    (51) statement_1 -> . read
    (52) statement_1 -> . write
    (53) statement_1 -> . callfunc SEMICOL
    (54) statement_1 -> . histogram
    (55) statement_1 -> . scale SEMICOL
    (190) empty -> .
    (39) assign -> . ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL
    (57) cond -> . IF LPAR expression RPAR generate_g_if block cond_1 finish_if
    (63) cloop -> . WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end
    (64) nloop -> . FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e
    (74) read -> . READ LPAR read_1 RPAR SEMICOL
    (80) write -> . WRITE LPAR write_1 RPAR SEMICOL
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (56) histogram -> . HIST LPAR ID COMMA expression RPAR SEMICOL
    (136) scale -> . SCALE LPAR ID COMMA ID RPAR

    RCURLY          reduce using rule 190 (empty -> .)
    ID              shift and go to state 84
    IF              shift and go to state 97
    WHILE           shift and go to state 98
    FROM            shift and go to state 99
    READ            shift and go to state 100
    WRITE           shift and go to state 101
    HIST            shift and go to state 102
    SCALE           shift and go to state 103

    block_1                        shift and go to state 343
    statement                      shift and go to state 344
    statement_1                    shift and go to state 86
    empty                          shift and go to state 87
    assign                         shift and go to state 88
    cond                           shift and go to state 89
    cloop                          shift and go to state 90
    nloop                          shift and go to state 91
    read                           shift and go to state 92
    write                          shift and go to state 93
    callfunc                       shift and go to state 94
    histogram                      shift and go to state 95
    scale                          shift and go to state 96

state 316

    (63) cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR . block generate_g_cloop_end
    (24) block -> . LCURLY block_1 RCURLY

    LCURLY          shift and go to state 315

    block                          shift and go to state 345

state 317

    (67) nloop_2 -> push_id . EQUAL push_equal expression generate_assign

    EQUAL           shift and go to state 346


state 318

    (64) nloop -> FROM ID see_id nloop_1 push_id nloop_2 . TO expression generate_g_nloop_s block generate_g_nloop_e

    TO              shift and go to state 347


state 319

    (68) nloop_2 -> empty .
    (169) push_id -> empty .

    TO              reduce using rule 68 (nloop_2 -> empty .)
    EQUAL           reduce using rule 169 (push_id -> empty .)


state 320

    (75) read_1 -> ID see_id read_2 push_id . generate_g_read read_3
    (175) generate_g_read -> . empty
    (190) empty -> .

    COMMA           reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    generate_g_read                shift and go to state 348
    empty                          shift and go to state 349

state 321

    (76) read_2 -> dims reset_dims .

    COMMA           reduce using rule 76 (read_2 -> dims reset_dims .)
    RPAR            reduce using rule 76 (read_2 -> dims reset_dims .)


state 322

    (84) write_3 -> COMMA write_1 .

    RPAR            reduce using rule 84 (write_3 -> COMMA write_1 .)


state 323

    (56) histogram -> HIST LPAR ID COMMA expression RPAR . SEMICOL

    SEMICOL         shift and go to state 350


state 324

    (136) scale -> SCALE LPAR ID COMMA ID RPAR .

    SEMICOL         reduce using rule 136 (scale -> SCALE LPAR ID COMMA ID RPAR .)


state 325

    (42) dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK . dims_end
    (143) dims_end -> . empty
    (190) empty -> .

    COMMA           reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)
    TIMES           reduce using rule 190 (empty -> .)
    DIV             reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)

    dims_end                       shift and go to state 351
    empty                          shift and go to state 352

state 326

    (43) dims_1 -> COMMA see_dims_s . expression generate_g_verify_s
    (86) expression -> . sexp check_and_or expression_1
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    expression                     shift and go to state 353
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 327

    (140) see_dims_s -> empty .

    ID              reduce using rule 140 (see_dims_s -> empty .)
    CTEI            reduce using rule 140 (see_dims_s -> empty .)
    CTEF            reduce using rule 140 (see_dims_s -> empty .)
    CTEB            reduce using rule 140 (see_dims_s -> empty .)
    CTEC            reduce using rule 140 (see_dims_s -> empty .)
    MINUS           reduce using rule 140 (see_dims_s -> empty .)
    LPAR            reduce using rule 140 (see_dims_s -> empty .)
    MEAN            reduce using rule 140 (see_dims_s -> empty .)
    MEDIAN          reduce using rule 140 (see_dims_s -> empty .)
    MODE            reduce using rule 140 (see_dims_s -> empty .)
    VARIANCE        reduce using rule 140 (see_dims_s -> empty .)
    SD              reduce using rule 140 (see_dims_s -> empty .)
    AVG             reduce using rule 140 (see_dims_s -> empty .)


state 328

    (39) assign -> ID see_id push_id assign_1 EQUAL push_equal expression . generate_assign SEMICOL
    (171) generate_assign -> . empty
    (190) empty -> .

    SEMICOL         reduce using rule 190 (empty -> .)

    generate_assign                shift and go to state 354
    empty                          shift and go to state 355

state 329

    (69) callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num . RPAR

    RPAR            shift and go to state 356


state 330

    (187) verify_p_num -> empty .

    RPAR            reduce using rule 187 (verify_p_num -> empty .)


state 331

    (70) callfunc_1 -> expression verify_params . callfunc_3
    (72) callfunc_3 -> . COMMA increase_p_count callfunc_1
    (73) callfunc_3 -> . empty
    (190) empty -> .

    COMMA           shift and go to state 358
    RPAR            reduce using rule 190 (empty -> .)

    callfunc_3                     shift and go to state 357
    empty                          shift and go to state 359

state 332

    (185) verify_params -> empty .

    COMMA           reduce using rule 185 (verify_params -> empty .)
    RPAR            reduce using rule 185 (verify_params -> empty .)


state 333

    (87) expression_1 -> expression_2 push_and_or expression .

    SEMICOL         reduce using rule 87 (expression_1 -> expression_2 push_and_or expression .)
    RPAR            reduce using rule 87 (expression_1 -> expression_2 push_and_or expression .)
    COMMA           reduce using rule 87 (expression_1 -> expression_2 push_and_or expression .)
    RBRACK          reduce using rule 87 (expression_1 -> expression_2 push_and_or expression .)
    LCURLY          reduce using rule 87 (expression_1 -> expression_2 push_and_or expression .)
    TO              reduce using rule 87 (expression_1 -> expression_2 push_and_or expression .)


state 334

    (92) sexp_1 -> sexp_2 push_relational sexp .

    OR              reduce using rule 92 (sexp_1 -> sexp_2 push_relational sexp .)
    AND             reduce using rule 92 (sexp_1 -> sexp_2 push_relational sexp .)
    SEMICOL         reduce using rule 92 (sexp_1 -> sexp_2 push_relational sexp .)
    RPAR            reduce using rule 92 (sexp_1 -> sexp_2 push_relational sexp .)
    COMMA           reduce using rule 92 (sexp_1 -> sexp_2 push_relational sexp .)
    RBRACK          reduce using rule 92 (sexp_1 -> sexp_2 push_relational sexp .)
    LCURLY          reduce using rule 92 (sexp_1 -> sexp_2 push_relational sexp .)
    TO              reduce using rule 92 (sexp_1 -> sexp_2 push_relational sexp .)


state 335

    (102) exp_1 -> exp_2 push_sum exp .

    ISEQUAL         reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    EQUAL           reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    NOTEQUAL        reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    GREATERTHAN     reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    GREATERORQUAL   reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    LESSTHAN        reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    LESSOREQUAL     reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    OR              reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    AND             reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    SEMICOL         reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    RPAR            reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    COMMA           reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    RBRACK          reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    LCURLY          reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)
    TO              reduce using rule 102 (exp_1 -> exp_2 push_sum exp .)


state 336

    (107) term_1 -> term_2 push_mul_div term .

    PLUS            reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    MINUS           reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    ISEQUAL         reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    EQUAL           reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    NOTEQUAL        reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    GREATERTHAN     reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    GREATERORQUAL   reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    LESSTHAN        reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    LESSOREQUAL     reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    OR              reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    AND             reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    SEMICOL         reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    RPAR            reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    COMMA           reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    RBRACK          reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    LCURLY          reduce using rule 107 (term_1 -> term_2 push_mul_div term .)
    TO              reduce using rule 107 (term_1 -> term_2 push_mul_div term .)


state 337

    (113) factor_1 -> ID see_id push_id factor_3 print_value . reset_dims
    (152) reset_dims -> . empty
    (190) empty -> .

    TIMES           reduce using rule 190 (empty -> .)
    DIV             reduce using rule 190 (empty -> .)
    PLUS            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    ISEQUAL         reduce using rule 190 (empty -> .)
    EQUAL           reduce using rule 190 (empty -> .)
    NOTEQUAL        reduce using rule 190 (empty -> .)
    GREATERTHAN     reduce using rule 190 (empty -> .)
    GREATERORQUAL   reduce using rule 190 (empty -> .)
    LESSTHAN        reduce using rule 190 (empty -> .)
    LESSOREQUAL     reduce using rule 190 (empty -> .)
    OR              reduce using rule 190 (empty -> .)
    AND             reduce using rule 190 (empty -> .)
    SEMICOL         reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)
    COMMA           reduce using rule 190 (empty -> .)
    RBRACK          reduce using rule 190 (empty -> .)
    LCURLY          reduce using rule 190 (empty -> .)
    TO              reduce using rule 190 (empty -> .)

    reset_dims                     shift and go to state 360
    empty                          shift and go to state 175

state 338

    (153) print_value -> empty .

    TIMES           reduce using rule 153 (print_value -> empty .)
    DIV             reduce using rule 153 (print_value -> empty .)
    PLUS            reduce using rule 153 (print_value -> empty .)
    MINUS           reduce using rule 153 (print_value -> empty .)
    ISEQUAL         reduce using rule 153 (print_value -> empty .)
    EQUAL           reduce using rule 153 (print_value -> empty .)
    NOTEQUAL        reduce using rule 153 (print_value -> empty .)
    GREATERTHAN     reduce using rule 153 (print_value -> empty .)
    GREATERORQUAL   reduce using rule 153 (print_value -> empty .)
    LESSTHAN        reduce using rule 153 (print_value -> empty .)
    LESSOREQUAL     reduce using rule 153 (print_value -> empty .)
    OR              reduce using rule 153 (print_value -> empty .)
    AND             reduce using rule 153 (print_value -> empty .)
    SEMICOL         reduce using rule 153 (print_value -> empty .)
    RPAR            reduce using rule 153 (print_value -> empty .)
    COMMA           reduce using rule 153 (print_value -> empty .)
    RBRACK          reduce using rule 153 (print_value -> empty .)
    LCURLY          reduce using rule 153 (print_value -> empty .)
    TO              reduce using rule 153 (print_value -> empty .)


state 339

    (126) factor_2 -> LPAR add_ff expression RPAR pop_ff .

    TIMES           reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    DIV             reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    PLUS            reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    MINUS           reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    ISEQUAL         reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    EQUAL           reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    NOTEQUAL        reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    GREATERTHAN     reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    GREATERORQUAL   reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    LESSTHAN        reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    LESSOREQUAL     reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    OR              reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    AND             reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    SEMICOL         reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    RPAR            reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    COMMA           reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    RBRACK          reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    LCURLY          reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)
    TO              reduce using rule 126 (factor_2 -> LPAR add_ff expression RPAR pop_ff .)


state 340

    (163) pop_ff -> empty .

    TIMES           reduce using rule 163 (pop_ff -> empty .)
    DIV             reduce using rule 163 (pop_ff -> empty .)
    PLUS            reduce using rule 163 (pop_ff -> empty .)
    MINUS           reduce using rule 163 (pop_ff -> empty .)
    ISEQUAL         reduce using rule 163 (pop_ff -> empty .)
    EQUAL           reduce using rule 163 (pop_ff -> empty .)
    NOTEQUAL        reduce using rule 163 (pop_ff -> empty .)
    GREATERTHAN     reduce using rule 163 (pop_ff -> empty .)
    GREATERORQUAL   reduce using rule 163 (pop_ff -> empty .)
    LESSTHAN        reduce using rule 163 (pop_ff -> empty .)
    LESSOREQUAL     reduce using rule 163 (pop_ff -> empty .)
    OR              reduce using rule 163 (pop_ff -> empty .)
    AND             reduce using rule 163 (pop_ff -> empty .)
    SEMICOL         reduce using rule 163 (pop_ff -> empty .)
    RPAR            reduce using rule 163 (pop_ff -> empty .)
    COMMA           reduce using rule 163 (pop_ff -> empty .)
    RBRACK          reduce using rule 163 (pop_ff -> empty .)
    LCURLY          reduce using rule 163 (pop_ff -> empty .)
    TO              reduce using rule 163 (pop_ff -> empty .)


state 341

    (57) cond -> IF LPAR expression RPAR generate_g_if block cond_1 . finish_if
    (173) finish_if -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    IF              reduce using rule 190 (empty -> .)
    WHILE           reduce using rule 190 (empty -> .)
    FROM            reduce using rule 190 (empty -> .)
    READ            reduce using rule 190 (empty -> .)
    WRITE           reduce using rule 190 (empty -> .)
    HIST            reduce using rule 190 (empty -> .)
    SCALE           reduce using rule 190 (empty -> .)
    RETURN          reduce using rule 190 (empty -> .)
    RCURLY          reduce using rule 190 (empty -> .)
    END             reduce using rule 190 (empty -> .)

    finish_if                      shift and go to state 361
    empty                          shift and go to state 362

state 342

    (58) cond_1 -> ELSE . generate_g_else cond_2
    (174) generate_g_else -> . empty
    (190) empty -> .

    LCURLY          reduce using rule 190 (empty -> .)
    IF              reduce using rule 190 (empty -> .)
    ID              reduce using rule 190 (empty -> .)
    WHILE           reduce using rule 190 (empty -> .)
    FROM            reduce using rule 190 (empty -> .)
    READ            reduce using rule 190 (empty -> .)
    WRITE           reduce using rule 190 (empty -> .)
    HIST            reduce using rule 190 (empty -> .)
    SCALE           reduce using rule 190 (empty -> .)
    RETURN          reduce using rule 190 (empty -> .)
    RCURLY          reduce using rule 190 (empty -> .)
    END             reduce using rule 190 (empty -> .)

    generate_g_else                shift and go to state 363
    empty                          shift and go to state 364

state 343

    (24) block -> LCURLY block_1 . RCURLY

    RCURLY          shift and go to state 365


state 344

    (25) block_1 -> statement .

    RCURLY          reduce using rule 25 (block_1 -> statement .)


state 345

    (63) cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block . generate_g_cloop_end
    (179) generate_g_cloop_end -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    IF              reduce using rule 190 (empty -> .)
    WHILE           reduce using rule 190 (empty -> .)
    FROM            reduce using rule 190 (empty -> .)
    READ            reduce using rule 190 (empty -> .)
    WRITE           reduce using rule 190 (empty -> .)
    HIST            reduce using rule 190 (empty -> .)
    SCALE           reduce using rule 190 (empty -> .)
    RETURN          reduce using rule 190 (empty -> .)
    RCURLY          reduce using rule 190 (empty -> .)
    END             reduce using rule 190 (empty -> .)

    generate_g_cloop_end           shift and go to state 366
    empty                          shift and go to state 367

state 346

    (67) nloop_2 -> push_id EQUAL . push_equal expression generate_assign
    (170) push_equal -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    CTEI            reduce using rule 190 (empty -> .)
    CTEF            reduce using rule 190 (empty -> .)
    CTEB            reduce using rule 190 (empty -> .)
    CTEC            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)
    MEAN            reduce using rule 190 (empty -> .)
    MEDIAN          reduce using rule 190 (empty -> .)
    MODE            reduce using rule 190 (empty -> .)
    VARIANCE        reduce using rule 190 (empty -> .)
    SD              reduce using rule 190 (empty -> .)
    AVG             reduce using rule 190 (empty -> .)

    push_equal                     shift and go to state 368
    empty                          shift and go to state 292

state 347

    (64) nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO . expression generate_g_nloop_s block generate_g_nloop_e
    (86) expression -> . sexp check_and_or expression_1
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    expression                     shift and go to state 369
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 348

    (75) read_1 -> ID see_id read_2 push_id generate_g_read . read_3
    (78) read_3 -> . COMMA read_1
    (79) read_3 -> . empty
    (190) empty -> .

    COMMA           shift and go to state 371
    RPAR            reduce using rule 190 (empty -> .)

    read_3                         shift and go to state 370
    empty                          shift and go to state 372

state 349

    (175) generate_g_read -> empty .

    COMMA           reduce using rule 175 (generate_g_read -> empty .)
    RPAR            reduce using rule 175 (generate_g_read -> empty .)


state 350

    (56) histogram -> HIST LPAR ID COMMA expression RPAR SEMICOL .

    ID              reduce using rule 56 (histogram -> HIST LPAR ID COMMA expression RPAR SEMICOL .)
    IF              reduce using rule 56 (histogram -> HIST LPAR ID COMMA expression RPAR SEMICOL .)
    WHILE           reduce using rule 56 (histogram -> HIST LPAR ID COMMA expression RPAR SEMICOL .)
    FROM            reduce using rule 56 (histogram -> HIST LPAR ID COMMA expression RPAR SEMICOL .)
    READ            reduce using rule 56 (histogram -> HIST LPAR ID COMMA expression RPAR SEMICOL .)
    WRITE           reduce using rule 56 (histogram -> HIST LPAR ID COMMA expression RPAR SEMICOL .)
    HIST            reduce using rule 56 (histogram -> HIST LPAR ID COMMA expression RPAR SEMICOL .)
    SCALE           reduce using rule 56 (histogram -> HIST LPAR ID COMMA expression RPAR SEMICOL .)
    RETURN          reduce using rule 56 (histogram -> HIST LPAR ID COMMA expression RPAR SEMICOL .)
    RCURLY          reduce using rule 56 (histogram -> HIST LPAR ID COMMA expression RPAR SEMICOL .)
    END             reduce using rule 56 (histogram -> HIST LPAR ID COMMA expression RPAR SEMICOL .)


state 351

    (42) dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .

    COMMA           reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    RPAR            reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    EQUAL           reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    TO              reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    TIMES           reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    DIV             reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    PLUS            reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    MINUS           reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    ISEQUAL         reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    NOTEQUAL        reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    GREATERTHAN     reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    GREATERORQUAL   reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    LESSTHAN        reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    LESSOREQUAL     reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    OR              reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    AND             reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    SEMICOL         reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    RBRACK          reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)
    LCURLY          reduce using rule 42 (dims -> LBRACK see_dims expression generate_g_verify_f dims_1 RBRACK dims_end .)


state 352

    (143) dims_end -> empty .

    COMMA           reduce using rule 143 (dims_end -> empty .)
    RPAR            reduce using rule 143 (dims_end -> empty .)
    EQUAL           reduce using rule 143 (dims_end -> empty .)
    TO              reduce using rule 143 (dims_end -> empty .)
    TIMES           reduce using rule 143 (dims_end -> empty .)
    DIV             reduce using rule 143 (dims_end -> empty .)
    PLUS            reduce using rule 143 (dims_end -> empty .)
    MINUS           reduce using rule 143 (dims_end -> empty .)
    ISEQUAL         reduce using rule 143 (dims_end -> empty .)
    NOTEQUAL        reduce using rule 143 (dims_end -> empty .)
    GREATERTHAN     reduce using rule 143 (dims_end -> empty .)
    GREATERORQUAL   reduce using rule 143 (dims_end -> empty .)
    LESSTHAN        reduce using rule 143 (dims_end -> empty .)
    LESSOREQUAL     reduce using rule 143 (dims_end -> empty .)
    OR              reduce using rule 143 (dims_end -> empty .)
    AND             reduce using rule 143 (dims_end -> empty .)
    SEMICOL         reduce using rule 143 (dims_end -> empty .)
    RBRACK          reduce using rule 143 (dims_end -> empty .)
    LCURLY          reduce using rule 143 (dims_end -> empty .)


state 353

    (43) dims_1 -> COMMA see_dims_s expression . generate_g_verify_s
    (142) generate_g_verify_s -> . empty
    (190) empty -> .

    RBRACK          reduce using rule 190 (empty -> .)

    generate_g_verify_s            shift and go to state 373
    empty                          shift and go to state 374

state 354

    (39) assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign . SEMICOL

    SEMICOL         shift and go to state 375


state 355

    (171) generate_assign -> empty .

    SEMICOL         reduce using rule 171 (generate_assign -> empty .)
    TO              reduce using rule 171 (generate_assign -> empty .)


state 356

    (69) callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .

    SEMICOL         reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    TIMES           reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    DIV             reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    PLUS            reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    MINUS           reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    ISEQUAL         reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    EQUAL           reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    NOTEQUAL        reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    GREATERTHAN     reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    GREATERORQUAL   reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    LESSTHAN        reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    LESSOREQUAL     reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    OR              reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    AND             reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    RPAR            reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    COMMA           reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    RBRACK          reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    LCURLY          reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)
    TO              reduce using rule 69 (callfunc -> ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR .)


state 357

    (70) callfunc_1 -> expression verify_params callfunc_3 .

    RPAR            reduce using rule 70 (callfunc_1 -> expression verify_params callfunc_3 .)


state 358

    (72) callfunc_3 -> COMMA . increase_p_count callfunc_1
    (186) increase_p_count -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    CTEI            reduce using rule 190 (empty -> .)
    CTEF            reduce using rule 190 (empty -> .)
    CTEB            reduce using rule 190 (empty -> .)
    CTEC            reduce using rule 190 (empty -> .)
    MINUS           reduce using rule 190 (empty -> .)
    LPAR            reduce using rule 190 (empty -> .)
    MEAN            reduce using rule 190 (empty -> .)
    MEDIAN          reduce using rule 190 (empty -> .)
    MODE            reduce using rule 190 (empty -> .)
    VARIANCE        reduce using rule 190 (empty -> .)
    SD              reduce using rule 190 (empty -> .)
    AVG             reduce using rule 190 (empty -> .)
    RPAR            reduce using rule 190 (empty -> .)

    increase_p_count               shift and go to state 376
    empty                          shift and go to state 377

state 359

    (73) callfunc_3 -> empty .

    RPAR            reduce using rule 73 (callfunc_3 -> empty .)


state 360

    (113) factor_1 -> ID see_id push_id factor_3 print_value reset_dims .

    TIMES           reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    DIV             reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    PLUS            reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    MINUS           reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    ISEQUAL         reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    EQUAL           reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    NOTEQUAL        reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    GREATERTHAN     reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    GREATERORQUAL   reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    LESSTHAN        reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    LESSOREQUAL     reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    OR              reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    AND             reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    SEMICOL         reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    RPAR            reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    COMMA           reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    RBRACK          reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    LCURLY          reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)
    TO              reduce using rule 113 (factor_1 -> ID see_id push_id factor_3 print_value reset_dims .)


state 361

    (57) cond -> IF LPAR expression RPAR generate_g_if block cond_1 finish_if .

    ID              reduce using rule 57 (cond -> IF LPAR expression RPAR generate_g_if block cond_1 finish_if .)
    IF              reduce using rule 57 (cond -> IF LPAR expression RPAR generate_g_if block cond_1 finish_if .)
    WHILE           reduce using rule 57 (cond -> IF LPAR expression RPAR generate_g_if block cond_1 finish_if .)
    FROM            reduce using rule 57 (cond -> IF LPAR expression RPAR generate_g_if block cond_1 finish_if .)
    READ            reduce using rule 57 (cond -> IF LPAR expression RPAR generate_g_if block cond_1 finish_if .)
    WRITE           reduce using rule 57 (cond -> IF LPAR expression RPAR generate_g_if block cond_1 finish_if .)
    HIST            reduce using rule 57 (cond -> IF LPAR expression RPAR generate_g_if block cond_1 finish_if .)
    SCALE           reduce using rule 57 (cond -> IF LPAR expression RPAR generate_g_if block cond_1 finish_if .)
    RETURN          reduce using rule 57 (cond -> IF LPAR expression RPAR generate_g_if block cond_1 finish_if .)
    RCURLY          reduce using rule 57 (cond -> IF LPAR expression RPAR generate_g_if block cond_1 finish_if .)
    END             reduce using rule 57 (cond -> IF LPAR expression RPAR generate_g_if block cond_1 finish_if .)


state 362

    (173) finish_if -> empty .

    ID              reduce using rule 173 (finish_if -> empty .)
    IF              reduce using rule 173 (finish_if -> empty .)
    WHILE           reduce using rule 173 (finish_if -> empty .)
    FROM            reduce using rule 173 (finish_if -> empty .)
    READ            reduce using rule 173 (finish_if -> empty .)
    WRITE           reduce using rule 173 (finish_if -> empty .)
    HIST            reduce using rule 173 (finish_if -> empty .)
    SCALE           reduce using rule 173 (finish_if -> empty .)
    RETURN          reduce using rule 173 (finish_if -> empty .)
    RCURLY          reduce using rule 173 (finish_if -> empty .)
    END             reduce using rule 173 (finish_if -> empty .)


state 363

    (58) cond_1 -> ELSE generate_g_else . cond_2
    (59) cond_2 -> . cond_3
    (60) cond_2 -> . block
    (61) cond_3 -> . cond
    (62) cond_3 -> . empty
    (24) block -> . LCURLY block_1 RCURLY
    (57) cond -> . IF LPAR expression RPAR generate_g_if block cond_1 finish_if
    (190) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    LCURLY          shift and go to state 315
    IF              shift and go to state 97
    ID              reduce using rule 190 (empty -> .)
    WHILE           reduce using rule 190 (empty -> .)
    FROM            reduce using rule 190 (empty -> .)
    READ            reduce using rule 190 (empty -> .)
    WRITE           reduce using rule 190 (empty -> .)
    HIST            reduce using rule 190 (empty -> .)
    SCALE           reduce using rule 190 (empty -> .)
    RETURN          reduce using rule 190 (empty -> .)
    RCURLY          reduce using rule 190 (empty -> .)
    END             reduce using rule 190 (empty -> .)

  ! IF              [ reduce using rule 190 (empty -> .) ]

    cond_2                         shift and go to state 378
    cond_3                         shift and go to state 379
    block                          shift and go to state 380
    cond                           shift and go to state 381
    empty                          shift and go to state 382

state 364

    (174) generate_g_else -> empty .

    LCURLY          reduce using rule 174 (generate_g_else -> empty .)
    IF              reduce using rule 174 (generate_g_else -> empty .)
    ID              reduce using rule 174 (generate_g_else -> empty .)
    WHILE           reduce using rule 174 (generate_g_else -> empty .)
    FROM            reduce using rule 174 (generate_g_else -> empty .)
    READ            reduce using rule 174 (generate_g_else -> empty .)
    WRITE           reduce using rule 174 (generate_g_else -> empty .)
    HIST            reduce using rule 174 (generate_g_else -> empty .)
    SCALE           reduce using rule 174 (generate_g_else -> empty .)
    RETURN          reduce using rule 174 (generate_g_else -> empty .)
    RCURLY          reduce using rule 174 (generate_g_else -> empty .)
    END             reduce using rule 174 (generate_g_else -> empty .)


state 365

    (24) block -> LCURLY block_1 RCURLY .

    ELSE            reduce using rule 24 (block -> LCURLY block_1 RCURLY .)
    ID              reduce using rule 24 (block -> LCURLY block_1 RCURLY .)
    IF              reduce using rule 24 (block -> LCURLY block_1 RCURLY .)
    WHILE           reduce using rule 24 (block -> LCURLY block_1 RCURLY .)
    FROM            reduce using rule 24 (block -> LCURLY block_1 RCURLY .)
    READ            reduce using rule 24 (block -> LCURLY block_1 RCURLY .)
    WRITE           reduce using rule 24 (block -> LCURLY block_1 RCURLY .)
    HIST            reduce using rule 24 (block -> LCURLY block_1 RCURLY .)
    SCALE           reduce using rule 24 (block -> LCURLY block_1 RCURLY .)
    RETURN          reduce using rule 24 (block -> LCURLY block_1 RCURLY .)
    RCURLY          reduce using rule 24 (block -> LCURLY block_1 RCURLY .)
    END             reduce using rule 24 (block -> LCURLY block_1 RCURLY .)


state 366

    (63) cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end .

    ID              reduce using rule 63 (cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end .)
    IF              reduce using rule 63 (cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end .)
    WHILE           reduce using rule 63 (cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end .)
    FROM            reduce using rule 63 (cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end .)
    READ            reduce using rule 63 (cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end .)
    WRITE           reduce using rule 63 (cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end .)
    HIST            reduce using rule 63 (cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end .)
    SCALE           reduce using rule 63 (cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end .)
    RETURN          reduce using rule 63 (cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end .)
    RCURLY          reduce using rule 63 (cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end .)
    END             reduce using rule 63 (cloop -> WHILE cloop_push_jump LPAR expression generate_g_cloop_start RPAR block generate_g_cloop_end .)


state 367

    (179) generate_g_cloop_end -> empty .

    ID              reduce using rule 179 (generate_g_cloop_end -> empty .)
    IF              reduce using rule 179 (generate_g_cloop_end -> empty .)
    WHILE           reduce using rule 179 (generate_g_cloop_end -> empty .)
    FROM            reduce using rule 179 (generate_g_cloop_end -> empty .)
    READ            reduce using rule 179 (generate_g_cloop_end -> empty .)
    WRITE           reduce using rule 179 (generate_g_cloop_end -> empty .)
    HIST            reduce using rule 179 (generate_g_cloop_end -> empty .)
    SCALE           reduce using rule 179 (generate_g_cloop_end -> empty .)
    RETURN          reduce using rule 179 (generate_g_cloop_end -> empty .)
    RCURLY          reduce using rule 179 (generate_g_cloop_end -> empty .)
    END             reduce using rule 179 (generate_g_cloop_end -> empty .)


state 368

    (67) nloop_2 -> push_id EQUAL push_equal . expression generate_assign
    (86) expression -> . sexp check_and_or expression_1
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    expression                     shift and go to state 383
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 369

    (64) nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression . generate_g_nloop_s block generate_g_nloop_e
    (180) generate_g_nloop_s -> . empty
    (190) empty -> .

    LCURLY          reduce using rule 190 (empty -> .)

    generate_g_nloop_s             shift and go to state 384
    empty                          shift and go to state 385

state 370

    (75) read_1 -> ID see_id read_2 push_id generate_g_read read_3 .

    RPAR            reduce using rule 75 (read_1 -> ID see_id read_2 push_id generate_g_read read_3 .)


state 371

    (78) read_3 -> COMMA . read_1
    (75) read_1 -> . ID see_id read_2 push_id generate_g_read read_3

    ID              shift and go to state 167

    read_1                         shift and go to state 386

state 372

    (79) read_3 -> empty .

    RPAR            reduce using rule 79 (read_3 -> empty .)


state 373

    (43) dims_1 -> COMMA see_dims_s expression generate_g_verify_s .

    RBRACK          reduce using rule 43 (dims_1 -> COMMA see_dims_s expression generate_g_verify_s .)


state 374

    (142) generate_g_verify_s -> empty .

    RBRACK          reduce using rule 142 (generate_g_verify_s -> empty .)


state 375

    (39) assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL .

    ID              reduce using rule 39 (assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL .)
    IF              reduce using rule 39 (assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL .)
    WHILE           reduce using rule 39 (assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL .)
    FROM            reduce using rule 39 (assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL .)
    READ            reduce using rule 39 (assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL .)
    WRITE           reduce using rule 39 (assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL .)
    HIST            reduce using rule 39 (assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL .)
    SCALE           reduce using rule 39 (assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL .)
    RETURN          reduce using rule 39 (assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL .)
    RCURLY          reduce using rule 39 (assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL .)
    END             reduce using rule 39 (assign -> ID see_id push_id assign_1 EQUAL push_equal expression generate_assign SEMICOL .)


state 376

    (72) callfunc_3 -> COMMA increase_p_count . callfunc_1
    (70) callfunc_1 -> . expression verify_params callfunc_3
    (71) callfunc_1 -> . empty
    (86) expression -> . sexp check_and_or expression_1
    (190) empty -> .
    (91) sexp -> . exp check_relational sexp_1
    (101) exp -> . term check_sum exp_1
    (106) term -> . factor check_mul_div term_1
    (111) factor -> . factor_1
    (112) factor -> . factor_2
    (113) factor_1 -> . ID see_id push_id factor_3 print_value reset_dims
    (114) factor_1 -> . callfunc
    (115) factor_1 -> . CTEI push_int
    (116) factor_1 -> . CTEF push_float
    (117) factor_1 -> . CTEB push_bool
    (118) factor_1 -> . CTEC push_char
    (119) factor_1 -> . MINUS factor_1
    (120) factor_1 -> . mean
    (121) factor_1 -> . median
    (122) factor_1 -> . mode
    (123) factor_1 -> . variance
    (124) factor_1 -> . standard_deviation
    (125) factor_1 -> . average
    (126) factor_2 -> . LPAR add_ff expression RPAR pop_ff
    (69) callfunc -> . ID see_id verify_func LPAR activate_record callfunc_1 verify_p_num RPAR
    (131) mean -> . MEAN LPAR ID RPAR
    (132) median -> . MEDIAN LPAR ID RPAR
    (133) mode -> . MODE LPAR ID RPAR
    (134) variance -> . VARIANCE LPAR ID RPAR
    (135) standard_deviation -> . SD LPAR ID RPAR
    (137) average -> . AVG LPAR ID RPAR

    RPAR            reduce using rule 190 (empty -> .)
    ID              shift and go to state 143
    CTEI            shift and go to state 145
    CTEF            shift and go to state 146
    CTEB            shift and go to state 147
    CTEC            shift and go to state 148
    MINUS           shift and go to state 149
    LPAR            shift and go to state 156
    MEAN            shift and go to state 157
    MEDIAN          shift and go to state 158
    MODE            shift and go to state 159
    VARIANCE        shift and go to state 160
    SD              shift and go to state 161
    AVG             shift and go to state 162

    callfunc_1                     shift and go to state 387
    expression                     shift and go to state 294
    empty                          shift and go to state 295
    sexp                           shift and go to state 137
    exp                            shift and go to state 138
    term                           shift and go to state 139
    factor                         shift and go to state 140
    factor_1                       shift and go to state 141
    factor_2                       shift and go to state 142
    callfunc                       shift and go to state 144
    mean                           shift and go to state 150
    median                         shift and go to state 151
    mode                           shift and go to state 152
    variance                       shift and go to state 153
    standard_deviation             shift and go to state 154
    average                        shift and go to state 155

state 377

    (186) increase_p_count -> empty .

    ID              reduce using rule 186 (increase_p_count -> empty .)
    CTEI            reduce using rule 186 (increase_p_count -> empty .)
    CTEF            reduce using rule 186 (increase_p_count -> empty .)
    CTEB            reduce using rule 186 (increase_p_count -> empty .)
    CTEC            reduce using rule 186 (increase_p_count -> empty .)
    MINUS           reduce using rule 186 (increase_p_count -> empty .)
    LPAR            reduce using rule 186 (increase_p_count -> empty .)
    MEAN            reduce using rule 186 (increase_p_count -> empty .)
    MEDIAN          reduce using rule 186 (increase_p_count -> empty .)
    MODE            reduce using rule 186 (increase_p_count -> empty .)
    VARIANCE        reduce using rule 186 (increase_p_count -> empty .)
    SD              reduce using rule 186 (increase_p_count -> empty .)
    AVG             reduce using rule 186 (increase_p_count -> empty .)
    RPAR            reduce using rule 186 (increase_p_count -> empty .)


state 378

    (58) cond_1 -> ELSE generate_g_else cond_2 .

    ID              reduce using rule 58 (cond_1 -> ELSE generate_g_else cond_2 .)
    IF              reduce using rule 58 (cond_1 -> ELSE generate_g_else cond_2 .)
    WHILE           reduce using rule 58 (cond_1 -> ELSE generate_g_else cond_2 .)
    FROM            reduce using rule 58 (cond_1 -> ELSE generate_g_else cond_2 .)
    READ            reduce using rule 58 (cond_1 -> ELSE generate_g_else cond_2 .)
    WRITE           reduce using rule 58 (cond_1 -> ELSE generate_g_else cond_2 .)
    HIST            reduce using rule 58 (cond_1 -> ELSE generate_g_else cond_2 .)
    SCALE           reduce using rule 58 (cond_1 -> ELSE generate_g_else cond_2 .)
    RETURN          reduce using rule 58 (cond_1 -> ELSE generate_g_else cond_2 .)
    RCURLY          reduce using rule 58 (cond_1 -> ELSE generate_g_else cond_2 .)
    END             reduce using rule 58 (cond_1 -> ELSE generate_g_else cond_2 .)


state 379

    (59) cond_2 -> cond_3 .

    ID              reduce using rule 59 (cond_2 -> cond_3 .)
    IF              reduce using rule 59 (cond_2 -> cond_3 .)
    WHILE           reduce using rule 59 (cond_2 -> cond_3 .)
    FROM            reduce using rule 59 (cond_2 -> cond_3 .)
    READ            reduce using rule 59 (cond_2 -> cond_3 .)
    WRITE           reduce using rule 59 (cond_2 -> cond_3 .)
    HIST            reduce using rule 59 (cond_2 -> cond_3 .)
    SCALE           reduce using rule 59 (cond_2 -> cond_3 .)
    RETURN          reduce using rule 59 (cond_2 -> cond_3 .)
    RCURLY          reduce using rule 59 (cond_2 -> cond_3 .)
    END             reduce using rule 59 (cond_2 -> cond_3 .)


state 380

    (60) cond_2 -> block .

    ID              reduce using rule 60 (cond_2 -> block .)
    IF              reduce using rule 60 (cond_2 -> block .)
    WHILE           reduce using rule 60 (cond_2 -> block .)
    FROM            reduce using rule 60 (cond_2 -> block .)
    READ            reduce using rule 60 (cond_2 -> block .)
    WRITE           reduce using rule 60 (cond_2 -> block .)
    HIST            reduce using rule 60 (cond_2 -> block .)
    SCALE           reduce using rule 60 (cond_2 -> block .)
    RETURN          reduce using rule 60 (cond_2 -> block .)
    RCURLY          reduce using rule 60 (cond_2 -> block .)
    END             reduce using rule 60 (cond_2 -> block .)


state 381

    (61) cond_3 -> cond .

    ID              reduce using rule 61 (cond_3 -> cond .)
    IF              reduce using rule 61 (cond_3 -> cond .)
    WHILE           reduce using rule 61 (cond_3 -> cond .)
    FROM            reduce using rule 61 (cond_3 -> cond .)
    READ            reduce using rule 61 (cond_3 -> cond .)
    WRITE           reduce using rule 61 (cond_3 -> cond .)
    HIST            reduce using rule 61 (cond_3 -> cond .)
    SCALE           reduce using rule 61 (cond_3 -> cond .)
    RETURN          reduce using rule 61 (cond_3 -> cond .)
    RCURLY          reduce using rule 61 (cond_3 -> cond .)
    END             reduce using rule 61 (cond_3 -> cond .)


state 382

    (62) cond_3 -> empty .

    ID              reduce using rule 62 (cond_3 -> empty .)
    IF              reduce using rule 62 (cond_3 -> empty .)
    WHILE           reduce using rule 62 (cond_3 -> empty .)
    FROM            reduce using rule 62 (cond_3 -> empty .)
    READ            reduce using rule 62 (cond_3 -> empty .)
    WRITE           reduce using rule 62 (cond_3 -> empty .)
    HIST            reduce using rule 62 (cond_3 -> empty .)
    SCALE           reduce using rule 62 (cond_3 -> empty .)
    RETURN          reduce using rule 62 (cond_3 -> empty .)
    RCURLY          reduce using rule 62 (cond_3 -> empty .)
    END             reduce using rule 62 (cond_3 -> empty .)


state 383

    (67) nloop_2 -> push_id EQUAL push_equal expression . generate_assign
    (171) generate_assign -> . empty
    (190) empty -> .

    TO              reduce using rule 190 (empty -> .)

    generate_assign                shift and go to state 388
    empty                          shift and go to state 355

state 384

    (64) nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s . block generate_g_nloop_e
    (24) block -> . LCURLY block_1 RCURLY

    LCURLY          shift and go to state 315

    block                          shift and go to state 389

state 385

    (180) generate_g_nloop_s -> empty .

    LCURLY          reduce using rule 180 (generate_g_nloop_s -> empty .)


state 386

    (78) read_3 -> COMMA read_1 .

    RPAR            reduce using rule 78 (read_3 -> COMMA read_1 .)


state 387

    (72) callfunc_3 -> COMMA increase_p_count callfunc_1 .

    RPAR            reduce using rule 72 (callfunc_3 -> COMMA increase_p_count callfunc_1 .)


state 388

    (67) nloop_2 -> push_id EQUAL push_equal expression generate_assign .

    TO              reduce using rule 67 (nloop_2 -> push_id EQUAL push_equal expression generate_assign .)


state 389

    (64) nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block . generate_g_nloop_e
    (181) generate_g_nloop_e -> . empty
    (190) empty -> .

    ID              reduce using rule 190 (empty -> .)
    IF              reduce using rule 190 (empty -> .)
    WHILE           reduce using rule 190 (empty -> .)
    FROM            reduce using rule 190 (empty -> .)
    READ            reduce using rule 190 (empty -> .)
    WRITE           reduce using rule 190 (empty -> .)
    HIST            reduce using rule 190 (empty -> .)
    SCALE           reduce using rule 190 (empty -> .)
    RETURN          reduce using rule 190 (empty -> .)
    RCURLY          reduce using rule 190 (empty -> .)
    END             reduce using rule 190 (empty -> .)

    generate_g_nloop_e             shift and go to state 390
    empty                          shift and go to state 391

state 390

    (64) nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e .

    ID              reduce using rule 64 (nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e .)
    IF              reduce using rule 64 (nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e .)
    WHILE           reduce using rule 64 (nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e .)
    FROM            reduce using rule 64 (nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e .)
    READ            reduce using rule 64 (nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e .)
    WRITE           reduce using rule 64 (nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e .)
    HIST            reduce using rule 64 (nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e .)
    SCALE           reduce using rule 64 (nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e .)
    RETURN          reduce using rule 64 (nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e .)
    RCURLY          reduce using rule 64 (nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e .)
    END             reduce using rule 64 (nloop -> FROM ID see_id nloop_1 push_id nloop_2 TO expression generate_g_nloop_s block generate_g_nloop_e .)


state 391

    (181) generate_g_nloop_e -> empty .

    ID              reduce using rule 181 (generate_g_nloop_e -> empty .)
    IF              reduce using rule 181 (generate_g_nloop_e -> empty .)
    WHILE           reduce using rule 181 (generate_g_nloop_e -> empty .)
    FROM            reduce using rule 181 (generate_g_nloop_e -> empty .)
    READ            reduce using rule 181 (generate_g_nloop_e -> empty .)
    WRITE           reduce using rule 181 (generate_g_nloop_e -> empty .)
    HIST            reduce using rule 181 (generate_g_nloop_e -> empty .)
    SCALE           reduce using rule 181 (generate_g_nloop_e -> empty .)
    RETURN          reduce using rule 181 (generate_g_nloop_e -> empty .)
    RCURLY          reduce using rule 181 (generate_g_nloop_e -> empty .)
    END             reduce using rule 181 (generate_g_nloop_e -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 363 resolved as shift
